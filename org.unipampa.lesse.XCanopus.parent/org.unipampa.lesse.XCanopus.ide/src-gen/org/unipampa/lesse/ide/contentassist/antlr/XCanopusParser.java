/*
 * generated by Xtext 2.16.0
 */
package org.unipampa.lesse.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.unipampa.lesse.ide.contentassist.antlr.internal.InternalXCanopusParser;
import org.unipampa.lesse.services.XCanopusGrammarAccess;

public class XCanopusParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XCanopusGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XCanopusGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMainAccess().getMainAlternatives_0(), "rule__Main__MainAlternatives_0");
			builder.put(grammarAccess.getSTEPSAccess().getAlternatives(), "rule__STEPS__Alternatives");
			builder.put(grammarAccess.getAnd_atleastAccess().getAlternatives_3(), "rule__And_atleast__Alternatives_3");
			builder.put(grammarAccess.getAnd_the_metricAccess().getAlternatives_3(), "rule__And_the_metric__Alternatives_3");
			builder.put(grammarAccess.getAnd_the_metricAccess().getAlternatives_5(), "rule__And_the_metric__Alternatives_5");
			builder.put(grammarAccess.getThenAccess().getAlternatives_3(), "rule__Then__Alternatives_3");
			builder.put(grammarAccess.getThenAccess().getAlternatives_5(), "rule__Then__Alternatives_5");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getMETRICTYPEMONITOREDAccess().getAlternatives(), "rule__METRICTYPEMONITORED__Alternatives");
			builder.put(grammarAccess.getMETRICTYPEAccess().getAlternatives(), "rule__METRICTYPE__Alternatives");
			builder.put(grammarAccess.getHARDWAREAccess().getAlternatives(), "rule__HARDWARE__Alternatives");
			builder.put(grammarAccess.getSUT_TYPEAccess().getAlternatives(), "rule__SUT_TYPE__Alternatives");
			builder.put(grammarAccess.getMetricModelAccess().getGroup(), "rule__MetricModel__Group__0");
			builder.put(grammarAccess.getAnd_workloadAccess().getGroup(), "rule__And_workload__Group__0");
			builder.put(grammarAccess.getAnd_the_scenarioAccess().getGroup(), "rule__And_the_scenario__Group__0");
			builder.put(grammarAccess.getAnd_atleastAccess().getGroup(), "rule__And_atleast__Group__0");
			builder.put(grammarAccess.getAnd_the_metricAccess().getGroup(), "rule__And_the_metric__Group__0");
			builder.put(grammarAccess.getAnd_the_metricAccess().getGroup_7(), "rule__And_the_metric__Group_7__0");
			builder.put(grammarAccess.getWhenAccess().getGroup(), "rule__When__Group__0");
			builder.put(grammarAccess.getThenAccess().getGroup(), "rule__Then__Group__0");
			builder.put(grammarAccess.getThenAccess().getGroup_7(), "rule__Then__Group_7__0");
			builder.put(grammarAccess.getGivenAccess().getGroup(), "rule__Given__Group__0");
			builder.put(grammarAccess.getSCENARIOAccess().getGroup(), "rule__SCENARIO__Group__0");
			builder.put(grammarAccess.getSUTAccess().getGroup(), "rule__SUT__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getModelAccess().getMainAssignment(), "rule__Model__MainAssignment");
			builder.put(grammarAccess.getMetricModelAccess().getNameAssignment_4(), "rule__MetricModel__NameAssignment_4");
			builder.put(grammarAccess.getMetricModelAccess().getStepsAssignment_9(), "rule__MetricModel__StepsAssignment_9");
			builder.put(grammarAccess.getMainAccess().getMainAssignment(), "rule__Main__MainAssignment");
			builder.put(grammarAccess.getAnd_workloadAccess().getSut1Assignment_2(), "rule__And_workload__Sut1Assignment_2");
			builder.put(grammarAccess.getAnd_workloadAccess().getSuttypeAssignment_4(), "rule__And_workload__SuttypeAssignment_4");
			builder.put(grammarAccess.getAnd_workloadAccess().getSut2Assignment_6(), "rule__And_workload__Sut2Assignment_6");
			builder.put(grammarAccess.getAnd_the_scenarioAccess().getScenarioAssignment_2(), "rule__And_the_scenario__ScenarioAssignment_2");
			builder.put(grammarAccess.getAnd_atleastAccess().getInteger1Assignment_2(), "rule__And_atleast__Integer1Assignment_2");
			builder.put(grammarAccess.getAnd_atleastAccess().getInteger2Assignment_4(), "rule__And_atleast__Integer2Assignment_4");
			builder.put(grammarAccess.getAnd_the_metricAccess().getMetricAssignment_2(), "rule__And_the_metric__MetricAssignment_2");
			builder.put(grammarAccess.getAnd_the_metricAccess().getInteger1Assignment_4(), "rule__And_the_metric__Integer1Assignment_4");
			builder.put(grammarAccess.getAnd_the_metricAccess().getInteger2Assignment_6(), "rule__And_the_metric__Integer2Assignment_6");
			builder.put(grammarAccess.getAnd_the_metricAccess().getInteger3Assignment_7_1(), "rule__And_the_metric__Integer3Assignment_7_1");
			builder.put(grammarAccess.getWhenAccess().getMetrictypeAssignment_2(), "rule__When__MetrictypeAssignment_2");
			builder.put(grammarAccess.getThenAccess().getMetricAssignment_2(), "rule__Then__MetricAssignment_2");
			builder.put(grammarAccess.getThenAccess().getInteger1Assignment_4(), "rule__Then__Integer1Assignment_4");
			builder.put(grammarAccess.getThenAccess().getInteger2Assignment_6(), "rule__Then__Integer2Assignment_6");
			builder.put(grammarAccess.getThenAccess().getInteger3Assignment_7_1(), "rule__Then__Integer3Assignment_7_1");
			builder.put(grammarAccess.getGivenAccess().getSut1Assignment_2(), "rule__Given__Sut1Assignment_2");
			builder.put(grammarAccess.getGivenAccess().getSuttypeAssignment_3(), "rule__Given__SuttypeAssignment_3");
			builder.put(grammarAccess.getGivenAccess().getSut2Assignment_5(), "rule__Given__Sut2Assignment_5");
			builder.put(grammarAccess.getSCENARIOAccess().getNameAssignment_2(), "rule__SCENARIO__NameAssignment_2");
			builder.put(grammarAccess.getSUTAccess().getNameAssignment_3(), "rule__SUT__NameAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XCanopusGrammarAccess grammarAccess;

	@Override
	protected InternalXCanopusParser createParser() {
		InternalXCanopusParser result = new InternalXCanopusParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XCanopusGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XCanopusGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
