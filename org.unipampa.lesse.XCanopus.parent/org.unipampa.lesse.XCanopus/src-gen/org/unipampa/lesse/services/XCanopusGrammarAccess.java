/*
 * generated by Xtext 2.16.0
 */
package org.unipampa.lesse.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XCanopusGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.Model");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainMainParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//Model:
		//	main+=Main*;
		@Override public ParserRule getRule() { return rule; }
		
		////  includes += Include*
		////  monitorings+=MetricModel* 
		////  scenario+=SCENARIO* 
		////  suts+=SUT*
		//main+=Main*
		public Assignment getMainAssignment() { return cMainAssignment; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_0() { return cMainMainParserRuleCall_0; }
	}
	public class MetricModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.MetricModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFreetextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMonitoringKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cFreetextParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStepsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStepsSTEPSParserRuleCall_9_0 = (RuleCall)cStepsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		////Include:
		////	'include' importURI=STRING 'as' name=ID
		////;
		//MetricModel:
		//	'Feature:' Freetext '.'
		//	'Monitoring:' name=ID 'description' Freetext '.' '{'
		//	steps+=STEPS+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Feature:' Freetext '.' 'Monitoring:' name=ID 'description' Freetext '.' '{' steps+=STEPS+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Feature:'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//Freetext
		public RuleCall getFreetextParserRuleCall_1() { return cFreetextParserRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//'Monitoring:'
		public Keyword getMonitoringKeyword_3() { return cMonitoringKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }
		
		//Freetext
		public RuleCall getFreetextParserRuleCall_6() { return cFreetextParserRuleCall_6; }
		
		//'.'
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//steps+=STEPS+
		public Assignment getStepsAssignment_9() { return cStepsAssignment_9; }
		
		//STEPS
		public RuleCall getStepsSTEPSParserRuleCall_9_0() { return cStepsSTEPSParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.Main");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cMainAlternatives_0 = (Alternatives)cMainAssignment.eContents().get(0);
		private final RuleCall cMainMetricModelParserRuleCall_0_0 = (RuleCall)cMainAlternatives_0.eContents().get(0);
		private final RuleCall cMainSCENARIOParserRuleCall_0_1 = (RuleCall)cMainAlternatives_0.eContents().get(1);
		private final RuleCall cMainSUTParserRuleCall_0_2 = (RuleCall)cMainAlternatives_0.eContents().get(2);
		
		//// '|' choice
		//// '?' optional+
		//// '+' 1 or more
		//// '*' 0 or more
		//// '+=' list of elements
		//// 0 or more strings
		//Main:
		//	main+=(MetricModel | SCENARIO | SUT);
		@Override public ParserRule getRule() { return rule; }
		
		//main+=(MetricModel | SCENARIO | SUT)
		public Assignment getMainAssignment() { return cMainAssignment; }
		
		//(MetricModel | SCENARIO | SUT)
		public Alternatives getMainAlternatives_0() { return cMainAlternatives_0; }
		
		//MetricModel
		public RuleCall getMainMetricModelParserRuleCall_0_0() { return cMainMetricModelParserRuleCall_0_0; }
		
		//SCENARIO
		public RuleCall getMainSCENARIOParserRuleCall_0_1() { return cMainSCENARIOParserRuleCall_0_1; }
		
		//SUT
		public RuleCall getMainSUTParserRuleCall_0_2() { return cMainSUTParserRuleCall_0_2; }
	}
	public class FreetextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.Freetext");
		private final RuleCall cEStringParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Freetext:
		//	EString*;
		@Override public ParserRule getRule() { return rule; }
		
		//EString*
		public RuleCall getEStringParserRuleCall() { return cEStringParserRuleCall; }
	}
	public class STEPSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.STEPS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGivenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnd_workloadParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAnd_atleastParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAnd_the_scenarioParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAnd_the_metricParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		////possible steps
		//STEPS:
		//	given | when | then | and_workload | and_atleast | and_the_scenario | and_the_metric;
		@Override public ParserRule getRule() { return rule; }
		
		//given | when | then | and_workload | and_atleast | and_the_scenario | and_the_metric
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//given
		public RuleCall getGivenParserRuleCall_0() { return cGivenParserRuleCall_0; }
		
		//when
		public RuleCall getWhenParserRuleCall_1() { return cWhenParserRuleCall_1; }
		
		//then
		public RuleCall getThenParserRuleCall_2() { return cThenParserRuleCall_2; }
		
		//and_workload
		public RuleCall getAnd_workloadParserRuleCall_3() { return cAnd_workloadParserRuleCall_3; }
		
		//and_atleast
		public RuleCall getAnd_atleastParserRuleCall_4() { return cAnd_atleastParserRuleCall_4; }
		
		//and_the_scenario
		public RuleCall getAnd_the_scenarioParserRuleCall_5() { return cAnd_the_scenarioParserRuleCall_5; }
		
		//and_the_metric
		public RuleCall getAnd_the_metricParserRuleCall_6() { return cAnd_the_metricParserRuleCall_6; }
	}
	public class And_workloadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.and_workload");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWORKLOADGENERATEDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSut1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSut1SUTCrossReference_2_0 = (CrossReference)cSut1Assignment_2.eContents().get(0);
		private final RuleCall cSut1SUTIDTerminalRuleCall_2_0_1 = (RuleCall)cSut1SUTCrossReference_2_0.eContents().get(1);
		private final RuleCall cLOADGENERATORFORTHETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cSuttypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuttypeSUT_TYPEEnumRuleCall_4_0 = (RuleCall)cSuttypeAssignment_4.eContents().get(0);
		private final RuleCall cONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cSut2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSut2SUTCrossReference_6_0 = (CrossReference)cSut2Assignment_6.eContents().get(0);
		private final RuleCall cSut2SUTIDTerminalRuleCall_6_0_1 = (RuleCall)cSut2SUTCrossReference_6_0.eContents().get(1);
		
		//and_workload:
		//	'And' WORKLOADGENERATED sut1=[SUT] LOADGENERATORFORTHE suttype=SUT_TYPE ON sut2=[SUT];
		@Override public ParserRule getRule() { return rule; }
		
		//'And' WORKLOADGENERATED sut1=[SUT] LOADGENERATORFORTHE suttype=SUT_TYPE ON sut2=[SUT]
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//WORKLOADGENERATED
		public RuleCall getWORKLOADGENERATEDTerminalRuleCall_1() { return cWORKLOADGENERATEDTerminalRuleCall_1; }
		
		//sut1=[SUT]
		public Assignment getSut1Assignment_2() { return cSut1Assignment_2; }
		
		//[SUT]
		public CrossReference getSut1SUTCrossReference_2_0() { return cSut1SUTCrossReference_2_0; }
		
		//ID
		public RuleCall getSut1SUTIDTerminalRuleCall_2_0_1() { return cSut1SUTIDTerminalRuleCall_2_0_1; }
		
		//LOADGENERATORFORTHE
		public RuleCall getLOADGENERATORFORTHETerminalRuleCall_3() { return cLOADGENERATORFORTHETerminalRuleCall_3; }
		
		//suttype=SUT_TYPE
		public Assignment getSuttypeAssignment_4() { return cSuttypeAssignment_4; }
		
		//SUT_TYPE
		public RuleCall getSuttypeSUT_TYPEEnumRuleCall_4_0() { return cSuttypeSUT_TYPEEnumRuleCall_4_0; }
		
		//ON
		public RuleCall getONTerminalRuleCall_5() { return cONTerminalRuleCall_5; }
		
		//sut2=[SUT]
		public Assignment getSut2Assignment_6() { return cSut2Assignment_6; }
		
		//[SUT]
		public CrossReference getSut2SUTCrossReference_6_0() { return cSut2SUTCrossReference_6_0; }
		
		//ID
		public RuleCall getSut2SUTIDTerminalRuleCall_6_0_1() { return cSut2SUTIDTerminalRuleCall_6_0_1; }
	}
	public class And_the_scenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.and_the_scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTHETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cScenarioAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cScenarioSCENARIOCrossReference_2_0 = (CrossReference)cScenarioAssignment_2.eContents().get(0);
		private final RuleCall cScenarioSCENARIOIDTerminalRuleCall_2_0_1 = (RuleCall)cScenarioSCENARIOCrossReference_2_0.eContents().get(1);
		private final RuleCall cISTESTSCENARIOTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//and_the_scenario:
		//	'And' THE scenario=[SCENARIO] ISTESTSCENARIO;
		@Override public ParserRule getRule() { return rule; }
		
		//'And' THE scenario=[SCENARIO] ISTESTSCENARIO
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//THE
		public RuleCall getTHETerminalRuleCall_1() { return cTHETerminalRuleCall_1; }
		
		//scenario=[SCENARIO]
		public Assignment getScenarioAssignment_2() { return cScenarioAssignment_2; }
		
		//[SCENARIO]
		public CrossReference getScenarioSCENARIOCrossReference_2_0() { return cScenarioSCENARIOCrossReference_2_0; }
		
		//ID
		public RuleCall getScenarioSCENARIOIDTerminalRuleCall_2_0_1() { return cScenarioSCENARIOIDTerminalRuleCall_2_0_1; }
		
		//ISTESTSCENARIO
		public RuleCall getISTESTSCENARIOTerminalRuleCall_3() { return cISTESTSCENARIOTerminalRuleCall_3; }
	}
	public class And_atleastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.and_atleast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cATLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInteger1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInteger1INTTerminalRuleCall_2_0 = (RuleCall)cInteger1Assignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cMBWHEN_GREATEROREQUAL_TEXTTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cMBWHEN_LESSTHAN_TEXTTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cMBWHEN_MORETHAN_TEXTTerminalRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		private final RuleCall cMBWHEN_MINOROREQUAL_TEXTTerminalRuleCall_3_3 = (RuleCall)cAlternatives_3.eContents().get(3);
		private final Assignment cInteger2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInteger2INTTerminalRuleCall_4_0 = (RuleCall)cInteger2Assignment_4.eContents().get(0);
		
		////first format CHOICE
		//and_atleast:
		//	'And' ATL integer1=INT (MBWHEN_GREATEROREQUAL_TEXT | MBWHEN_LESSTHAN_TEXT | MBWHEN_MORETHAN_TEXT |
		//	MBWHEN_MINOROREQUAL_TEXT) integer2=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'And' ATL integer1=INT (MBWHEN_GREATEROREQUAL_TEXT | MBWHEN_LESSTHAN_TEXT | MBWHEN_MORETHAN_TEXT |
		//MBWHEN_MINOROREQUAL_TEXT) integer2=INT
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//ATL
		public RuleCall getATLTerminalRuleCall_1() { return cATLTerminalRuleCall_1; }
		
		//integer1=INT
		public Assignment getInteger1Assignment_2() { return cInteger1Assignment_2; }
		
		//INT
		public RuleCall getInteger1INTTerminalRuleCall_2_0() { return cInteger1INTTerminalRuleCall_2_0; }
		
		//MBWHEN_GREATEROREQUAL_TEXT | MBWHEN_LESSTHAN_TEXT | MBWHEN_MORETHAN_TEXT | MBWHEN_MINOROREQUAL_TEXT
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//MBWHEN_GREATEROREQUAL_TEXT
		public RuleCall getMBWHEN_GREATEROREQUAL_TEXTTerminalRuleCall_3_0() { return cMBWHEN_GREATEROREQUAL_TEXTTerminalRuleCall_3_0; }
		
		//MBWHEN_LESSTHAN_TEXT
		public RuleCall getMBWHEN_LESSTHAN_TEXTTerminalRuleCall_3_1() { return cMBWHEN_LESSTHAN_TEXTTerminalRuleCall_3_1; }
		
		//MBWHEN_MORETHAN_TEXT
		public RuleCall getMBWHEN_MORETHAN_TEXTTerminalRuleCall_3_2() { return cMBWHEN_MORETHAN_TEXTTerminalRuleCall_3_2; }
		
		//MBWHEN_MINOROREQUAL_TEXT
		public RuleCall getMBWHEN_MINOROREQUAL_TEXTTerminalRuleCall_3_3() { return cMBWHEN_MINOROREQUAL_TEXTTerminalRuleCall_3_3; }
		
		//integer2=INT
		public Assignment getInteger2Assignment_4() { return cInteger2Assignment_4; }
		
		//INT
		public RuleCall getInteger2INTTerminalRuleCall_4_0() { return cInteger2INTTerminalRuleCall_4_0; }
	}
	public class And_the_metricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.and_the_metric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTHETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMetricAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetricMETRICTYPEEnumRuleCall_2_0 = (RuleCall)cMetricAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSHOULDBELESSTHAN_TEXTTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cSHOULDBEATLEAST_TEXTTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cSHOULDBEGREATERTHANTerminalRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		private final Assignment cInteger1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInteger1INTTerminalRuleCall_4_0 = (RuleCall)cInteger1Assignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final RuleCall cWHENTHENUMBERISLESSTHAN_TEXTTerminalRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final RuleCall cWHENTHENUMBERISGREATERTHAN_TEXTTerminalRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final RuleCall cWHENTHENUMBERISGREATEROREQUAL_TEXTTerminalRuleCall_5_2 = (RuleCall)cAlternatives_5.eContents().get(2);
		private final RuleCall cWHENTHENUMBERIRLESSEROREQUAL_TEXTTerminalRuleCall_5_3 = (RuleCall)cAlternatives_5.eContents().get(3);
		private final RuleCall cWHENTHENUMBERAREBETWEEN_TEXTTerminalRuleCall_5_4 = (RuleCall)cAlternatives_5.eContents().get(4);
		private final Assignment cInteger2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInteger2INTTerminalRuleCall_6_0 = (RuleCall)cInteger2Assignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cANDTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cInteger3Assignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cInteger3INTTerminalRuleCall_7_1_0 = (RuleCall)cInteger3Assignment_7_1.eContents().get(0);
		
		//and_the_metric:
		//	'And' THE metric=METRICTYPE (SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN) integer1=INT
		//	(WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT |
		//	WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT) integer2=INT (AND integer3=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'And' THE metric=METRICTYPE (SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN) integer1=INT
		//(WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT |
		//WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT) integer2=INT (AND integer3=INT)?
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//THE
		public RuleCall getTHETerminalRuleCall_1() { return cTHETerminalRuleCall_1; }
		
		//metric=METRICTYPE
		public Assignment getMetricAssignment_2() { return cMetricAssignment_2; }
		
		//METRICTYPE
		public RuleCall getMetricMETRICTYPEEnumRuleCall_2_0() { return cMetricMETRICTYPEEnumRuleCall_2_0; }
		
		//SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//SHOULDBELESSTHAN_TEXT
		public RuleCall getSHOULDBELESSTHAN_TEXTTerminalRuleCall_3_0() { return cSHOULDBELESSTHAN_TEXTTerminalRuleCall_3_0; }
		
		//SHOULDBEATLEAST_TEXT
		public RuleCall getSHOULDBEATLEAST_TEXTTerminalRuleCall_3_1() { return cSHOULDBEATLEAST_TEXTTerminalRuleCall_3_1; }
		
		//SHOULDBEGREATERTHAN
		public RuleCall getSHOULDBEGREATERTHANTerminalRuleCall_3_2() { return cSHOULDBEGREATERTHANTerminalRuleCall_3_2; }
		
		//integer1=INT
		public Assignment getInteger1Assignment_4() { return cInteger1Assignment_4; }
		
		//INT
		public RuleCall getInteger1INTTerminalRuleCall_4_0() { return cInteger1INTTerminalRuleCall_4_0; }
		
		//WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT |
		//WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//WHENTHENUMBERISLESSTHAN_TEXT
		public RuleCall getWHENTHENUMBERISLESSTHAN_TEXTTerminalRuleCall_5_0() { return cWHENTHENUMBERISLESSTHAN_TEXTTerminalRuleCall_5_0; }
		
		//WHENTHENUMBERISGREATERTHAN_TEXT
		public RuleCall getWHENTHENUMBERISGREATERTHAN_TEXTTerminalRuleCall_5_1() { return cWHENTHENUMBERISGREATERTHAN_TEXTTerminalRuleCall_5_1; }
		
		//WHENTHENUMBERISGREATEROREQUAL_TEXT
		public RuleCall getWHENTHENUMBERISGREATEROREQUAL_TEXTTerminalRuleCall_5_2() { return cWHENTHENUMBERISGREATEROREQUAL_TEXTTerminalRuleCall_5_2; }
		
		//WHENTHENUMBERIRLESSEROREQUAL_TEXT
		public RuleCall getWHENTHENUMBERIRLESSEROREQUAL_TEXTTerminalRuleCall_5_3() { return cWHENTHENUMBERIRLESSEROREQUAL_TEXTTerminalRuleCall_5_3; }
		
		//WHENTHENUMBERAREBETWEEN_TEXT
		public RuleCall getWHENTHENUMBERAREBETWEEN_TEXTTerminalRuleCall_5_4() { return cWHENTHENUMBERAREBETWEEN_TEXTTerminalRuleCall_5_4; }
		
		//integer2=INT
		public Assignment getInteger2Assignment_6() { return cInteger2Assignment_6; }
		
		//INT
		public RuleCall getInteger2INTTerminalRuleCall_6_0() { return cInteger2INTTerminalRuleCall_6_0; }
		
		//(AND integer3=INT)?
		public Group getGroup_7() { return cGroup_7; }
		
		//AND
		public RuleCall getANDTerminalRuleCall_7_0() { return cANDTerminalRuleCall_7_0; }
		
		//integer3=INT
		public Assignment getInteger3Assignment_7_1() { return cInteger3Assignment_7_1; }
		
		//INT
		public RuleCall getInteger3INTTerminalRuleCall_7_1_0() { return cInteger3INTTerminalRuleCall_7_1_0; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.when");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTHETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMetrictypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetrictypeMETRICTYPEMONITOREDEnumRuleCall_2_0 = (RuleCall)cMetrictypeAssignment_2.eContents().get(0);
		private final RuleCall cISMONITOREDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////second format of use CHOICE
		//when:
		//	'When' THE metrictype=METRICTYPEMONITORED ISMONITORED;
		@Override public ParserRule getRule() { return rule; }
		
		//'When' THE metrictype=METRICTYPEMONITORED ISMONITORED
		public Group getGroup() { return cGroup; }
		
		//'When'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//THE
		public RuleCall getTHETerminalRuleCall_1() { return cTHETerminalRuleCall_1; }
		
		//metrictype=METRICTYPEMONITORED
		public Assignment getMetrictypeAssignment_2() { return cMetrictypeAssignment_2; }
		
		//METRICTYPEMONITORED
		public RuleCall getMetrictypeMETRICTYPEMONITOREDEnumRuleCall_2_0() { return cMetrictypeMETRICTYPEMONITOREDEnumRuleCall_2_0; }
		
		//ISMONITORED
		public RuleCall getISMONITOREDTerminalRuleCall_3() { return cISMONITOREDTerminalRuleCall_3; }
	}
	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTHETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMetricAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetricMETRICTYPEEnumRuleCall_2_0 = (RuleCall)cMetricAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSHOULDBELESSTHAN_TEXTTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cSHOULDBEATLEAST_TEXTTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cSHOULDBEGREATERTHANTerminalRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		private final Assignment cInteger1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInteger1INTTerminalRuleCall_4_0 = (RuleCall)cInteger1Assignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final RuleCall cWHENTHENUMBERISLESSTHAN_TEXTTerminalRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final RuleCall cWHENTHENUMBERISGREATERTHAN_TEXTTerminalRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final RuleCall cWHENTHENUMBERISGREATEROREQUAL_TEXTTerminalRuleCall_5_2 = (RuleCall)cAlternatives_5.eContents().get(2);
		private final RuleCall cWHENTHENUMBERIRLESSEROREQUAL_TEXTTerminalRuleCall_5_3 = (RuleCall)cAlternatives_5.eContents().get(3);
		private final RuleCall cWHENTHENUMBERAREBETWEEN_TEXTTerminalRuleCall_5_4 = (RuleCall)cAlternatives_5.eContents().get(4);
		private final Assignment cInteger2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInteger2INTTerminalRuleCall_6_0 = (RuleCall)cInteger2Assignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cANDTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cInteger3Assignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cInteger3INTTerminalRuleCall_7_1_0 = (RuleCall)cInteger3Assignment_7_1.eContents().get(0);
		
		//then:
		//	'Then' THE metric=METRICTYPE (SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN) integer1=INT
		//	(WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT |
		//	WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT) integer2=INT (AND integer3=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Then' THE metric=METRICTYPE (SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN) integer1=INT
		//(WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT |
		//WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT) integer2=INT (AND integer3=INT)?
		public Group getGroup() { return cGroup; }
		
		//'Then'
		public Keyword getThenKeyword_0() { return cThenKeyword_0; }
		
		//THE
		public RuleCall getTHETerminalRuleCall_1() { return cTHETerminalRuleCall_1; }
		
		//metric=METRICTYPE
		public Assignment getMetricAssignment_2() { return cMetricAssignment_2; }
		
		//METRICTYPE
		public RuleCall getMetricMETRICTYPEEnumRuleCall_2_0() { return cMetricMETRICTYPEEnumRuleCall_2_0; }
		
		//SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//SHOULDBELESSTHAN_TEXT
		public RuleCall getSHOULDBELESSTHAN_TEXTTerminalRuleCall_3_0() { return cSHOULDBELESSTHAN_TEXTTerminalRuleCall_3_0; }
		
		//SHOULDBEATLEAST_TEXT
		public RuleCall getSHOULDBEATLEAST_TEXTTerminalRuleCall_3_1() { return cSHOULDBEATLEAST_TEXTTerminalRuleCall_3_1; }
		
		//SHOULDBEGREATERTHAN
		public RuleCall getSHOULDBEGREATERTHANTerminalRuleCall_3_2() { return cSHOULDBEGREATERTHANTerminalRuleCall_3_2; }
		
		//integer1=INT
		public Assignment getInteger1Assignment_4() { return cInteger1Assignment_4; }
		
		//INT
		public RuleCall getInteger1INTTerminalRuleCall_4_0() { return cInteger1INTTerminalRuleCall_4_0; }
		
		//WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT |
		//WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//WHENTHENUMBERISLESSTHAN_TEXT
		public RuleCall getWHENTHENUMBERISLESSTHAN_TEXTTerminalRuleCall_5_0() { return cWHENTHENUMBERISLESSTHAN_TEXTTerminalRuleCall_5_0; }
		
		//WHENTHENUMBERISGREATERTHAN_TEXT
		public RuleCall getWHENTHENUMBERISGREATERTHAN_TEXTTerminalRuleCall_5_1() { return cWHENTHENUMBERISGREATERTHAN_TEXTTerminalRuleCall_5_1; }
		
		//WHENTHENUMBERISGREATEROREQUAL_TEXT
		public RuleCall getWHENTHENUMBERISGREATEROREQUAL_TEXTTerminalRuleCall_5_2() { return cWHENTHENUMBERISGREATEROREQUAL_TEXTTerminalRuleCall_5_2; }
		
		//WHENTHENUMBERIRLESSEROREQUAL_TEXT
		public RuleCall getWHENTHENUMBERIRLESSEROREQUAL_TEXTTerminalRuleCall_5_3() { return cWHENTHENUMBERIRLESSEROREQUAL_TEXTTerminalRuleCall_5_3; }
		
		//WHENTHENUMBERAREBETWEEN_TEXT
		public RuleCall getWHENTHENUMBERAREBETWEEN_TEXTTerminalRuleCall_5_4() { return cWHENTHENUMBERAREBETWEEN_TEXTTerminalRuleCall_5_4; }
		
		//integer2=INT
		public Assignment getInteger2Assignment_6() { return cInteger2Assignment_6; }
		
		//INT
		public RuleCall getInteger2INTTerminalRuleCall_6_0() { return cInteger2INTTerminalRuleCall_6_0; }
		
		//(AND integer3=INT)?
		public Group getGroup_7() { return cGroup_7; }
		
		//AND
		public RuleCall getANDTerminalRuleCall_7_0() { return cANDTerminalRuleCall_7_0; }
		
		//integer3=INT
		public Assignment getInteger3Assignment_7_1() { return cInteger3Assignment_7_1; }
		
		//INT
		public RuleCall getInteger3INTTerminalRuleCall_7_1_0() { return cInteger3INTTerminalRuleCall_7_1_0; }
	}
	public class GivenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.given");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGivenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTHATTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSut1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSut1SUTCrossReference_2_0 = (CrossReference)cSut1Assignment_2.eContents().get(0);
		private final RuleCall cSut1SUTIDTerminalRuleCall_2_0_1 = (RuleCall)cSut1SUTCrossReference_2_0.eContents().get(1);
		private final Assignment cSuttypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSuttypeSUT_TYPEEnumRuleCall_3_0 = (RuleCall)cSuttypeAssignment_3.eContents().get(0);
		private final RuleCall cMONITOREDBYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cSut2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSut2SUTCrossReference_5_0 = (CrossReference)cSut2Assignment_5.eContents().get(0);
		private final RuleCall cSut2SUTIDTerminalRuleCall_5_0_1 = (RuleCall)cSut2SUTCrossReference_5_0.eContents().get(1);
		private final RuleCall cMONITOR_TEXTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//given:
		//	'Given' THAT sut1=[SUT] suttype=SUT_TYPE MONITOREDBY sut2=[SUT] MONITOR_TEXT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Given' THAT sut1=[SUT] suttype=SUT_TYPE MONITOREDBY sut2=[SUT] MONITOR_TEXT
		public Group getGroup() { return cGroup; }
		
		//'Given'
		public Keyword getGivenKeyword_0() { return cGivenKeyword_0; }
		
		//THAT
		public RuleCall getTHATTerminalRuleCall_1() { return cTHATTerminalRuleCall_1; }
		
		//sut1=[SUT]
		public Assignment getSut1Assignment_2() { return cSut1Assignment_2; }
		
		//[SUT]
		public CrossReference getSut1SUTCrossReference_2_0() { return cSut1SUTCrossReference_2_0; }
		
		//ID
		public RuleCall getSut1SUTIDTerminalRuleCall_2_0_1() { return cSut1SUTIDTerminalRuleCall_2_0_1; }
		
		//suttype=SUT_TYPE
		public Assignment getSuttypeAssignment_3() { return cSuttypeAssignment_3; }
		
		//SUT_TYPE
		public RuleCall getSuttypeSUT_TYPEEnumRuleCall_3_0() { return cSuttypeSUT_TYPEEnumRuleCall_3_0; }
		
		//MONITOREDBY
		public RuleCall getMONITOREDBYTerminalRuleCall_4() { return cMONITOREDBYTerminalRuleCall_4; }
		
		//sut2=[SUT]
		public Assignment getSut2Assignment_5() { return cSut2Assignment_5; }
		
		//[SUT]
		public CrossReference getSut2SUTCrossReference_5_0() { return cSut2SUTCrossReference_5_0; }
		
		//ID
		public RuleCall getSut2SUTIDTerminalRuleCall_5_0_1() { return cSut2SUTIDTerminalRuleCall_5_0_1; }
		
		//MONITOR_TEXT
		public RuleCall getMONITOR_TEXTTerminalRuleCall_6() { return cMONITOR_TEXTTerminalRuleCall_6; }
	}
	public class SCENARIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.SCENARIO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////availablembytescounter:
		////	AVAILABLEMBYTESCOUNTER_TEXT 
		////;
		////idletimecounter:
		////	IDLETIMECOUNTER_TEXT 
		////;
		////throughputmbytes:
		////	THROUGHPUTMBYTES_TEXT 
		////;
		////transactionpersecond:
		////;
		////processortimecounter:
		////	PROCESSORTIMECOUNTER_TEXT
		////;
		//SCENARIO:
		//	'Scenario' '{'
		//	name=ID
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Scenario' '{' name=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'Scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SUTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.SUT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSUTAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SUT:
		//	{SUT}
		//	'SUT'
		//	'{'
		//	name=ID
		//	//	('hostname' hostname=EString)?
		//	//	('ip' ip=EString)?
		//	//	('hardware' hardware=HARDWARE)?
		//	//	('type' type=SUT_TYPE)?
		//	//	('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
		//	//	('metricmodel' metricmodel=[MetricModel|EString])?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SUT} 'SUT' '{' name=ID //	('hostname' hostname=EString)?
		////	('ip' ip=EString)?
		////	('hardware' hardware=HARDWARE)?
		////	('type' type=SUT_TYPE)?
		////	('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
		////	('metricmodel' metricmodel=[MetricModel|EString])?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{SUT}
		public Action getSUTAction_0() { return cSUTAction_0; }
		
		//'SUT'
		public Keyword getSUTKeyword_1() { return cSUTKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		////	('hostname' hostname=EString)?
		////	('ip' ip=EString)?
		////	('hardware' hardware=HARDWARE)?
		////	('type' type=SUT_TYPE)?
		////	('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
		////	('metricmodel' metricmodel=[MetricModel|EString])?
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////LoadGenerator:
		////	{LoadGenerator}
		////	(isMonitor?='isMonitor')?
		////	'LoadGenerator'
		////	'{'
		////		('hostname' hostname=EString)?
		////		('ip' ip=EString)?
		////		('hardware' hardware=HARDWARE)?
		////		('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
		////		('metricmodel' metricmodel=[MetricModel|EString])?
		////		('monitorr' monitor=[Monitor|EString])?
		////	'}';
		////Monitor:
		////	{Monitor}
		////	'Monitor'
		////	'{'
		////		('hostname' hostname=EString)?
		////		('ip' ip=EString)?
		////		('hardware' hardware=HARDWARE)?
		////		('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
		////	'}';
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class METRICTYPEMONITOREDElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.METRICTYPEMONITORED");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMEMORYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMEMORYMemoryKeyword_0_0 = (Keyword)cMEMORYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDISKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDISKDiskKeyword_1_0 = (Keyword)cDISKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEBRESOURCESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEBRESOURCESWebResourcesKeyword_2_0 = (Keyword)cWEBRESOURCESEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTRANSACTIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTRANSACTIONTransactionKeyword_3_0 = (Keyword)cTRANSACTIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESSOREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPROCESSORProcessorKeyword_4_0 = (Keyword)cPROCESSOREnumLiteralDeclaration_4.eContents().get(0);
		
		//enum METRICTYPEMONITORED:
		//	MEMORY='memory' | DISK='disk' | WEBRESOURCES='web resources' | TRANSACTION='transaction' | PROCESSOR='processor';
		public EnumRule getRule() { return rule; }
		
		//MEMORY='memory' | DISK='disk' | WEBRESOURCES='web resources' | TRANSACTION='transaction' | PROCESSOR='processor'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MEMORY='memory'
		public EnumLiteralDeclaration getMEMORYEnumLiteralDeclaration_0() { return cMEMORYEnumLiteralDeclaration_0; }
		
		//'memory'
		public Keyword getMEMORYMemoryKeyword_0_0() { return cMEMORYMemoryKeyword_0_0; }
		
		//DISK='disk'
		public EnumLiteralDeclaration getDISKEnumLiteralDeclaration_1() { return cDISKEnumLiteralDeclaration_1; }
		
		//'disk'
		public Keyword getDISKDiskKeyword_1_0() { return cDISKDiskKeyword_1_0; }
		
		//WEBRESOURCES='web resources'
		public EnumLiteralDeclaration getWEBRESOURCESEnumLiteralDeclaration_2() { return cWEBRESOURCESEnumLiteralDeclaration_2; }
		
		//'web resources'
		public Keyword getWEBRESOURCESWebResourcesKeyword_2_0() { return cWEBRESOURCESWebResourcesKeyword_2_0; }
		
		//TRANSACTION='transaction'
		public EnumLiteralDeclaration getTRANSACTIONEnumLiteralDeclaration_3() { return cTRANSACTIONEnumLiteralDeclaration_3; }
		
		//'transaction'
		public Keyword getTRANSACTIONTransactionKeyword_3_0() { return cTRANSACTIONTransactionKeyword_3_0; }
		
		//PROCESSOR='processor'
		public EnumLiteralDeclaration getPROCESSOREnumLiteralDeclaration_4() { return cPROCESSOREnumLiteralDeclaration_4; }
		
		//'processor'
		public Keyword getPROCESSORProcessorKeyword_4_0() { return cPROCESSORProcessorKeyword_4_0; }
	}
	public class METRICTYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.METRICTYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAvailablembytescounterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAvailablembytescounterAvailableMbytesCounterKeyword_0_0 = (Keyword)cAvailablembytescounterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIdletimecounterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIdletimecounterIdleTimeCounterKeyword_1_0 = (Keyword)cIdletimecounterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cThroughputmbytesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cThroughputmbytesThroughputMbytesKeyword_2_0 = (Keyword)cThroughputmbytesEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTransactionpersecondEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTransactionpersecondTransactionsPerSecondKeyword_3_0 = (Keyword)cTransactionpersecondEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTPSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTPSTPSKeyword_4_0 = (Keyword)cTPSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cProcessortimecounterEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cProcessortimecounterProcessorTimeCountKeyword_5_0 = (Keyword)cProcessortimecounterEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTransactionresponsetimeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTransactionresponsetimeTransactionsResponseTimeKeyword_6_0 = (Keyword)cTransactionresponsetimeEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum METRICTYPE:
		//	availablembytescounter='available mbytes counter' | idletimecounter='% idle time counter' |
		//	throughputmbytes='throughput mbytes' | transactionpersecond='transactions per second' | TPS |
		//	processortimecounter='% processor time count' | transactionresponsetime='transactions response time';
		public EnumRule getRule() { return rule; }
		
		//availablembytescounter='available mbytes counter' | idletimecounter='% idle time counter' |
		//throughputmbytes='throughput mbytes' | transactionpersecond='transactions per second' | TPS |
		//processortimecounter='% processor time count' | transactionresponsetime='transactions response time'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//availablembytescounter='available mbytes counter'
		public EnumLiteralDeclaration getAvailablembytescounterEnumLiteralDeclaration_0() { return cAvailablembytescounterEnumLiteralDeclaration_0; }
		
		//'available mbytes counter'
		public Keyword getAvailablembytescounterAvailableMbytesCounterKeyword_0_0() { return cAvailablembytescounterAvailableMbytesCounterKeyword_0_0; }
		
		//idletimecounter='% idle time counter'
		public EnumLiteralDeclaration getIdletimecounterEnumLiteralDeclaration_1() { return cIdletimecounterEnumLiteralDeclaration_1; }
		
		//'% idle time counter'
		public Keyword getIdletimecounterIdleTimeCounterKeyword_1_0() { return cIdletimecounterIdleTimeCounterKeyword_1_0; }
		
		//throughputmbytes='throughput mbytes'
		public EnumLiteralDeclaration getThroughputmbytesEnumLiteralDeclaration_2() { return cThroughputmbytesEnumLiteralDeclaration_2; }
		
		//'throughput mbytes'
		public Keyword getThroughputmbytesThroughputMbytesKeyword_2_0() { return cThroughputmbytesThroughputMbytesKeyword_2_0; }
		
		//transactionpersecond='transactions per second'
		public EnumLiteralDeclaration getTransactionpersecondEnumLiteralDeclaration_3() { return cTransactionpersecondEnumLiteralDeclaration_3; }
		
		//'transactions per second'
		public Keyword getTransactionpersecondTransactionsPerSecondKeyword_3_0() { return cTransactionpersecondTransactionsPerSecondKeyword_3_0; }
		
		//TPS
		public EnumLiteralDeclaration getTPSEnumLiteralDeclaration_4() { return cTPSEnumLiteralDeclaration_4; }
		
		//'TPS'
		public Keyword getTPSTPSKeyword_4_0() { return cTPSTPSKeyword_4_0; }
		
		//processortimecounter='% processor time count'
		public EnumLiteralDeclaration getProcessortimecounterEnumLiteralDeclaration_5() { return cProcessortimecounterEnumLiteralDeclaration_5; }
		
		//'% processor time count'
		public Keyword getProcessortimecounterProcessorTimeCountKeyword_5_0() { return cProcessortimecounterProcessorTimeCountKeyword_5_0; }
		
		//transactionresponsetime='transactions response time'
		public EnumLiteralDeclaration getTransactionresponsetimeEnumLiteralDeclaration_6() { return cTransactionresponsetimeEnumLiteralDeclaration_6; }
		
		//'transactions response time'
		public Keyword getTransactionresponsetimeTransactionsResponseTimeKeyword_6_0() { return cTransactionresponsetimeTransactionsResponseTimeKeyword_6_0; }
	}
	public class HARDWAREElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.HARDWARE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPHYSICAL_MACHINEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPHYSICAL_MACHINEPHYSICAL_MACHINEKeyword_0_0 = (Keyword)cPHYSICAL_MACHINEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVIRTUAL_MACHINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVIRTUAL_MACHINEVIRTUAL_MACHINEKeyword_1_0 = (Keyword)cVIRTUAL_MACHINEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCLOUD_SERVICEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCLOUD_SERVICECLOUD_SERVICEKeyword_2_0 = (Keyword)cCLOUD_SERVICEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum HARDWARE:
		//	PHYSICAL_MACHINE | VIRTUAL_MACHINE | CLOUD_SERVICE;
		public EnumRule getRule() { return rule; }
		
		//PHYSICAL_MACHINE | VIRTUAL_MACHINE | CLOUD_SERVICE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PHYSICAL_MACHINE
		public EnumLiteralDeclaration getPHYSICAL_MACHINEEnumLiteralDeclaration_0() { return cPHYSICAL_MACHINEEnumLiteralDeclaration_0; }
		
		//'PHYSICAL_MACHINE'
		public Keyword getPHYSICAL_MACHINEPHYSICAL_MACHINEKeyword_0_0() { return cPHYSICAL_MACHINEPHYSICAL_MACHINEKeyword_0_0; }
		
		//VIRTUAL_MACHINE
		public EnumLiteralDeclaration getVIRTUAL_MACHINEEnumLiteralDeclaration_1() { return cVIRTUAL_MACHINEEnumLiteralDeclaration_1; }
		
		//'VIRTUAL_MACHINE'
		public Keyword getVIRTUAL_MACHINEVIRTUAL_MACHINEKeyword_1_0() { return cVIRTUAL_MACHINEVIRTUAL_MACHINEKeyword_1_0; }
		
		//CLOUD_SERVICE
		public EnumLiteralDeclaration getCLOUD_SERVICEEnumLiteralDeclaration_2() { return cCLOUD_SERVICEEnumLiteralDeclaration_2; }
		
		//'CLOUD_SERVICE'
		public Keyword getCLOUD_SERVICECLOUD_SERVICEKeyword_2_0() { return cCLOUD_SERVICECLOUD_SERVICEKeyword_2_0; }
	}
	public class SUT_TYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.SUT_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDESKTOPAPPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDESKTOPAPPDESKTOPAPPKeyword_0_0 = (Keyword)cDESKTOPAPPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDATABASEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDATABASEDATABASEKeyword_1_0 = (Keyword)cDATABASEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEBAPPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEBAPPWEBAPPKeyword_2_0 = (Keyword)cWEBAPPEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWEBSERVICEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWEBSERVICEWEBSERVICEKeyword_3_0 = (Keyword)cWEBSERVICEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum SUT_TYPE:
		//	DESKTOPAPP | DATABASE | WEBAPP | WEBSERVICE;
		public EnumRule getRule() { return rule; }
		
		//DESKTOPAPP | DATABASE | WEBAPP | WEBSERVICE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DESKTOPAPP
		public EnumLiteralDeclaration getDESKTOPAPPEnumLiteralDeclaration_0() { return cDESKTOPAPPEnumLiteralDeclaration_0; }
		
		//'DESKTOPAPP'
		public Keyword getDESKTOPAPPDESKTOPAPPKeyword_0_0() { return cDESKTOPAPPDESKTOPAPPKeyword_0_0; }
		
		//DATABASE
		public EnumLiteralDeclaration getDATABASEEnumLiteralDeclaration_1() { return cDATABASEEnumLiteralDeclaration_1; }
		
		//'DATABASE'
		public Keyword getDATABASEDATABASEKeyword_1_0() { return cDATABASEDATABASEKeyword_1_0; }
		
		//WEBAPP
		public EnumLiteralDeclaration getWEBAPPEnumLiteralDeclaration_2() { return cWEBAPPEnumLiteralDeclaration_2; }
		
		//'WEBAPP'
		public Keyword getWEBAPPWEBAPPKeyword_2_0() { return cWEBAPPWEBAPPKeyword_2_0; }
		
		//WEBSERVICE
		public EnumLiteralDeclaration getWEBSERVICEEnumLiteralDeclaration_3() { return cWEBSERVICEEnumLiteralDeclaration_3; }
		
		//'WEBSERVICE'
		public Keyword getWEBSERVICEWEBSERVICEKeyword_3_0() { return cWEBSERVICEWEBSERVICEKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final MetricModelElements pMetricModel;
	private final MainElements pMain;
	private final FreetextElements pFreetext;
	private final STEPSElements pSTEPS;
	private final And_workloadElements pAnd_workload;
	private final And_the_scenarioElements pAnd_the_scenario;
	private final And_atleastElements pAnd_atleast;
	private final And_the_metricElements pAnd_the_metric;
	private final WhenElements pWhen;
	private final ThenElements pThen;
	private final GivenElements pGiven;
	private final METRICTYPEMONITOREDElements eMETRICTYPEMONITORED;
	private final METRICTYPEElements eMETRICTYPE;
	private final SCENARIOElements pSCENARIO;
	private final SUTElements pSUT;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	private final EStringElements pEString;
	private final HARDWAREElements eHARDWARE;
	private final SUT_TYPEElements eSUT_TYPE;
	private final TerminalRule tSHOULDBELESSTHAN_TEXT;
	private final TerminalRule tSHOULDBEATLEAST_TEXT;
	private final TerminalRule tSHOULDBEGREATERTHAN;
	private final TerminalRule tWHENTHENUMBERISLESSTHAN_TEXT;
	private final TerminalRule tWHENTHENUMBERISGREATERTHAN_TEXT;
	private final TerminalRule tWHENTHENUMBERISGREATEROREQUAL_TEXT;
	private final TerminalRule tWHENTHENUMBERIRLESSEROREQUAL_TEXT;
	private final TerminalRule tWHENTHENUMBERAREBETWEEN_TEXT;
	private final TerminalRule tMBWHEN_GREATEROREQUAL_TEXT;
	private final TerminalRule tMBWHEN_LESSTHAN_TEXT;
	private final TerminalRule tMBWHEN_MORETHAN_TEXT;
	private final TerminalRule tMBWHEN_MINOROREQUAL_TEXT;
	private final TerminalRule tAND;
	private final TerminalRule tMONITOR_TEXT;
	private final TerminalRule tTHE;
	private final TerminalRule tTHAT;
	private final TerminalRule tMONITOREDBY;
	private final TerminalRule tWORKLOADGENERATED;
	private final TerminalRule tLOADGENERATORFORTHE;
	private final TerminalRule tISTESTSCENARIO;
	private final TerminalRule tON;
	private final TerminalRule tISMONITORED;
	private final TerminalRule tATL;
	private final TerminalRule tNNL;
	private final TerminalRule tNL;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public XCanopusGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pMetricModel = new MetricModelElements();
		this.pMain = new MainElements();
		this.pFreetext = new FreetextElements();
		this.pSTEPS = new STEPSElements();
		this.pAnd_workload = new And_workloadElements();
		this.pAnd_the_scenario = new And_the_scenarioElements();
		this.pAnd_atleast = new And_atleastElements();
		this.pAnd_the_metric = new And_the_metricElements();
		this.pWhen = new WhenElements();
		this.pThen = new ThenElements();
		this.pGiven = new GivenElements();
		this.eMETRICTYPEMONITORED = new METRICTYPEMONITOREDElements();
		this.eMETRICTYPE = new METRICTYPEElements();
		this.pSCENARIO = new SCENARIOElements();
		this.pSUT = new SUTElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
		this.pEString = new EStringElements();
		this.eHARDWARE = new HARDWAREElements();
		this.eSUT_TYPE = new SUT_TYPEElements();
		this.tSHOULDBELESSTHAN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.SHOULDBELESSTHAN_TEXT");
		this.tSHOULDBEATLEAST_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.SHOULDBEATLEAST_TEXT");
		this.tSHOULDBEGREATERTHAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.SHOULDBEGREATERTHAN");
		this.tWHENTHENUMBERISLESSTHAN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.WHENTHENUMBERISLESSTHAN_TEXT");
		this.tWHENTHENUMBERISGREATERTHAN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.WHENTHENUMBERISGREATERTHAN_TEXT");
		this.tWHENTHENUMBERISGREATEROREQUAL_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.WHENTHENUMBERISGREATEROREQUAL_TEXT");
		this.tWHENTHENUMBERIRLESSEROREQUAL_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.WHENTHENUMBERIRLESSEROREQUAL_TEXT");
		this.tWHENTHENUMBERAREBETWEEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.WHENTHENUMBERAREBETWEEN_TEXT");
		this.tMBWHEN_GREATEROREQUAL_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.MBWHEN_GREATEROREQUAL_TEXT");
		this.tMBWHEN_LESSTHAN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.MBWHEN_LESSTHAN_TEXT");
		this.tMBWHEN_MORETHAN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.MBWHEN_MORETHAN_TEXT");
		this.tMBWHEN_MINOROREQUAL_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.MBWHEN_MINOROREQUAL_TEXT");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.AND");
		this.tMONITOR_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.MONITOR_TEXT");
		this.tTHE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.THE");
		this.tTHAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.THAT");
		this.tMONITOREDBY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.MONITOREDBY");
		this.tWORKLOADGENERATED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.WORKLOADGENERATED");
		this.tLOADGENERATORFORTHE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.LOADGENERATORFORTHE");
		this.tISTESTSCENARIO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.ISTESTSCENARIO");
		this.tON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.ON");
		this.tISMONITORED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.ISMONITORED");
		this.tATL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.ATL");
		this.tNNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.NNL");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.NL");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unipampa.lesse.XCanopus.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.unipampa.lesse.XCanopus".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	main+=Main*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////Include:
	////	'include' importURI=STRING 'as' name=ID
	////;
	//MetricModel:
	//	'Feature:' Freetext '.'
	//	'Monitoring:' name=ID 'description' Freetext '.' '{'
	//	steps+=STEPS+ '}';
	public MetricModelElements getMetricModelAccess() {
		return pMetricModel;
	}
	
	public ParserRule getMetricModelRule() {
		return getMetricModelAccess().getRule();
	}
	
	//// '|' choice
	//// '?' optional+
	//// '+' 1 or more
	//// '*' 0 or more
	//// '+=' list of elements
	//// 0 or more strings
	//Main:
	//	main+=(MetricModel | SCENARIO | SUT);
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Freetext:
	//	EString*;
	public FreetextElements getFreetextAccess() {
		return pFreetext;
	}
	
	public ParserRule getFreetextRule() {
		return getFreetextAccess().getRule();
	}
	
	////possible steps
	//STEPS:
	//	given | when | then | and_workload | and_atleast | and_the_scenario | and_the_metric;
	public STEPSElements getSTEPSAccess() {
		return pSTEPS;
	}
	
	public ParserRule getSTEPSRule() {
		return getSTEPSAccess().getRule();
	}
	
	//and_workload:
	//	'And' WORKLOADGENERATED sut1=[SUT] LOADGENERATORFORTHE suttype=SUT_TYPE ON sut2=[SUT];
	public And_workloadElements getAnd_workloadAccess() {
		return pAnd_workload;
	}
	
	public ParserRule getAnd_workloadRule() {
		return getAnd_workloadAccess().getRule();
	}
	
	//and_the_scenario:
	//	'And' THE scenario=[SCENARIO] ISTESTSCENARIO;
	public And_the_scenarioElements getAnd_the_scenarioAccess() {
		return pAnd_the_scenario;
	}
	
	public ParserRule getAnd_the_scenarioRule() {
		return getAnd_the_scenarioAccess().getRule();
	}
	
	////first format CHOICE
	//and_atleast:
	//	'And' ATL integer1=INT (MBWHEN_GREATEROREQUAL_TEXT | MBWHEN_LESSTHAN_TEXT | MBWHEN_MORETHAN_TEXT |
	//	MBWHEN_MINOROREQUAL_TEXT) integer2=INT;
	public And_atleastElements getAnd_atleastAccess() {
		return pAnd_atleast;
	}
	
	public ParserRule getAnd_atleastRule() {
		return getAnd_atleastAccess().getRule();
	}
	
	//and_the_metric:
	//	'And' THE metric=METRICTYPE (SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN) integer1=INT
	//	(WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT |
	//	WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT) integer2=INT (AND integer3=INT)?;
	public And_the_metricElements getAnd_the_metricAccess() {
		return pAnd_the_metric;
	}
	
	public ParserRule getAnd_the_metricRule() {
		return getAnd_the_metricAccess().getRule();
	}
	
	////second format of use CHOICE
	//when:
	//	'When' THE metrictype=METRICTYPEMONITORED ISMONITORED;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//then:
	//	'Then' THE metric=METRICTYPE (SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN) integer1=INT
	//	(WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT |
	//	WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT) integer2=INT (AND integer3=INT)?;
	public ThenElements getThenAccess() {
		return pThen;
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}
	
	//given:
	//	'Given' THAT sut1=[SUT] suttype=SUT_TYPE MONITOREDBY sut2=[SUT] MONITOR_TEXT;
	public GivenElements getGivenAccess() {
		return pGiven;
	}
	
	public ParserRule getGivenRule() {
		return getGivenAccess().getRule();
	}
	
	//enum METRICTYPEMONITORED:
	//	MEMORY='memory' | DISK='disk' | WEBRESOURCES='web resources' | TRANSACTION='transaction' | PROCESSOR='processor';
	public METRICTYPEMONITOREDElements getMETRICTYPEMONITOREDAccess() {
		return eMETRICTYPEMONITORED;
	}
	
	public EnumRule getMETRICTYPEMONITOREDRule() {
		return getMETRICTYPEMONITOREDAccess().getRule();
	}
	
	//enum METRICTYPE:
	//	availablembytescounter='available mbytes counter' | idletimecounter='% idle time counter' |
	//	throughputmbytes='throughput mbytes' | transactionpersecond='transactions per second' | TPS |
	//	processortimecounter='% processor time count' | transactionresponsetime='transactions response time';
	public METRICTYPEElements getMETRICTYPEAccess() {
		return eMETRICTYPE;
	}
	
	public EnumRule getMETRICTYPERule() {
		return getMETRICTYPEAccess().getRule();
	}
	
	////availablembytescounter:
	////	AVAILABLEMBYTESCOUNTER_TEXT 
	////;
	////idletimecounter:
	////	IDLETIMECOUNTER_TEXT 
	////;
	////throughputmbytes:
	////	THROUGHPUTMBYTES_TEXT 
	////;
	////transactionpersecond:
	////;
	////processortimecounter:
	////	PROCESSORTIMECOUNTER_TEXT
	////;
	//SCENARIO:
	//	'Scenario' '{'
	//	name=ID
	//	'}';
	public SCENARIOElements getSCENARIOAccess() {
		return pSCENARIO;
	}
	
	public ParserRule getSCENARIORule() {
		return getSCENARIOAccess().getRule();
	}
	
	//SUT:
	//	{SUT}
	//	'SUT'
	//	'{'
	//	name=ID
	//	//	('hostname' hostname=EString)?
	//	//	('ip' ip=EString)?
	//	//	('hardware' hardware=HARDWARE)?
	//	//	('type' type=SUT_TYPE)?
	//	//	('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
	//	//	('metricmodel' metricmodel=[MetricModel|EString])?
	//	'}';
	public SUTElements getSUTAccess() {
		return pSUT;
	}
	
	public ParserRule getSUTRule() {
		return getSUTAccess().getRule();
	}
	
	////LoadGenerator:
	////	{LoadGenerator}
	////	(isMonitor?='isMonitor')?
	////	'LoadGenerator'
	////	'{'
	////		('hostname' hostname=EString)?
	////		('ip' ip=EString)?
	////		('hardware' hardware=HARDWARE)?
	////		('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
	////		('metricmodel' metricmodel=[MetricModel|EString])?
	////		('monitorr' monitor=[Monitor|EString])?
	////	'}';
	////Monitor:
	////	{Monitor}
	////	'Monitor'
	////	'{'
	////		('hostname' hostname=EString)?
	////		('ip' ip=EString)?
	////		('hardware' hardware=HARDWARE)?
	////		('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
	////	'}';
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum HARDWARE:
	//	PHYSICAL_MACHINE | VIRTUAL_MACHINE | CLOUD_SERVICE;
	public HARDWAREElements getHARDWAREAccess() {
		return eHARDWARE;
	}
	
	public EnumRule getHARDWARERule() {
		return getHARDWAREAccess().getRule();
	}
	
	//enum SUT_TYPE:
	//	DESKTOPAPP | DATABASE | WEBAPP | WEBSERVICE;
	public SUT_TYPEElements getSUT_TYPEAccess() {
		return eSUT_TYPE;
	}
	
	public EnumRule getSUT_TYPERule() {
		return getSUT_TYPEAccess().getRule();
	}
	
	//terminal SHOULDBELESSTHAN_TEXT:
	//	'should be less than';
	public TerminalRule getSHOULDBELESSTHAN_TEXTRule() {
		return tSHOULDBELESSTHAN_TEXT;
	}
	
	//terminal SHOULDBEATLEAST_TEXT:
	//	'should be at least';
	public TerminalRule getSHOULDBEATLEAST_TEXTRule() {
		return tSHOULDBEATLEAST_TEXT;
	}
	
	//terminal SHOULDBEGREATERTHAN:
	//	'should be more than';
	public TerminalRule getSHOULDBEGREATERTHANRule() {
		return tSHOULDBEGREATERTHAN;
	}
	
	//terminal WHENTHENUMBERISLESSTHAN_TEXT:
	//	'when the number of virtual users is less than';
	public TerminalRule getWHENTHENUMBERISLESSTHAN_TEXTRule() {
		return tWHENTHENUMBERISLESSTHAN_TEXT;
	}
	
	//terminal WHENTHENUMBERISGREATERTHAN_TEXT:
	//	'when the number of virtual users is greater than';
	public TerminalRule getWHENTHENUMBERISGREATERTHAN_TEXTRule() {
		return tWHENTHENUMBERISGREATERTHAN_TEXT;
	}
	
	//terminal WHENTHENUMBERISGREATEROREQUAL_TEXT:
	//	'when the number of virtual users is greater or equal to';
	public TerminalRule getWHENTHENUMBERISGREATEROREQUAL_TEXTRule() {
		return tWHENTHENUMBERISGREATEROREQUAL_TEXT;
	}
	
	//terminal WHENTHENUMBERIRLESSEROREQUAL_TEXT:
	//	'when the number of virtual users is lesser or equal to';
	public TerminalRule getWHENTHENUMBERIRLESSEROREQUAL_TEXTRule() {
		return tWHENTHENUMBERIRLESSEROREQUAL_TEXT;
	}
	
	//terminal WHENTHENUMBERAREBETWEEN_TEXT:
	//	'when the number of virtual users are between';
	public TerminalRule getWHENTHENUMBERAREBETWEEN_TEXTRule() {
		return tWHENTHENUMBERAREBETWEEN_TEXT;
	}
	
	//terminal MBWHEN_GREATEROREQUAL_TEXT:
	//	'MB when the number of virtual users is greater than or equal to';
	public TerminalRule getMBWHEN_GREATEROREQUAL_TEXTRule() {
		return tMBWHEN_GREATEROREQUAL_TEXT;
	}
	
	//terminal MBWHEN_LESSTHAN_TEXT:
	//	'MB when the number of virtual users is less than';
	public TerminalRule getMBWHEN_LESSTHAN_TEXTRule() {
		return tMBWHEN_LESSTHAN_TEXT;
	}
	
	//terminal MBWHEN_MORETHAN_TEXT:
	//	'MB when the number of virtual users is more than';
	public TerminalRule getMBWHEN_MORETHAN_TEXTRule() {
		return tMBWHEN_MORETHAN_TEXT;
	}
	
	//terminal MBWHEN_MINOROREQUAL_TEXT:
	//	'MB when the number of virtual users is lesser than or equal to';
	public TerminalRule getMBWHEN_MINOROREQUAL_TEXTRule() {
		return tMBWHEN_MINOROREQUAL_TEXT;
	}
	
	//terminal AND:
	//	'and';
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal MONITOR_TEXT:
	//	'monitor';
	public TerminalRule getMONITOR_TEXTRule() {
		return tMONITOR_TEXT;
	}
	
	//terminal THE:
	//	'the';
	public TerminalRule getTHERule() {
		return tTHE;
	}
	
	//terminal THAT:
	//	'that';
	public TerminalRule getTHATRule() {
		return tTHAT;
	}
	
	//terminal MONITOREDBY:
	//	'monitored by ';
	public TerminalRule getMONITOREDBYRule() {
		return tMONITOREDBY;
	}
	
	//terminal WORKLOADGENERATED:
	//	'workload generated through';
	public TerminalRule getWORKLOADGENERATEDRule() {
		return tWORKLOADGENERATED;
	}
	
	//terminal LOADGENERATORFORTHE:
	//	'Load Generator for the';
	public TerminalRule getLOADGENERATORFORTHERule() {
		return tLOADGENERATORFORTHE;
	}
	
	//terminal ISTESTSCENARIO:
	//	'test scenario';
	public TerminalRule getISTESTSCENARIORule() {
		return tISTESTSCENARIO;
	}
	
	//terminal ON:
	//	'on';
	public TerminalRule getONRule() {
		return tON;
	}
	
	//terminal ISMONITORED:
	//	'is monitored';
	public TerminalRule getISMONITOREDRule() {
		return tISMONITORED;
	}
	
	//terminal ATL:
	//	'at least';
	public TerminalRule getATLRule() {
		return tATL;
	}
	
	//terminal fragment NNL:
	//	!('\r' | '\n');
	public TerminalRule getNNLRule() {
		return tNNL;
	}
	
	//terminal fragment NL:
	//	'\r'? '\n'?;
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//@Override
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@Override
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//@Override
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
