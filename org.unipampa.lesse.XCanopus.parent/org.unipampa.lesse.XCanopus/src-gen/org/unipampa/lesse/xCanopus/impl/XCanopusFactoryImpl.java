/**
 * generated by Xtext 2.16.0
 */
package org.unipampa.lesse.xCanopus.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.unipampa.lesse.xCanopus.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XCanopusFactoryImpl extends EFactoryImpl implements XCanopusFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static XCanopusFactory init()
  {
    try
    {
      XCanopusFactory theXCanopusFactory = (XCanopusFactory)EPackage.Registry.INSTANCE.getEFactory(XCanopusPackage.eNS_URI);
      if (theXCanopusFactory != null)
      {
        return theXCanopusFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new XCanopusFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XCanopusFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case XCanopusPackage.MODEL: return createModel();
      case XCanopusPackage.INCLUDE: return createInclude();
      case XCanopusPackage.MONITORING: return createMonitoring();
      case XCanopusPackage.CONDITION: return createCONDITION();
      case XCanopusPackage.AND: return createAND();
      case XCanopusPackage.WHEN: return createWHEN();
      case XCanopusPackage.THEN: return createTHEN();
      case XCanopusPackage.POSTCONDITION: return createPOSTCONDITION();
      case XCanopusPackage.METRIC: return createMetric();
      case XCanopusPackage.COUNTER: return createCounter();
      case XCanopusPackage.SUT: return createSUT();
      case XCanopusPackage.LOAD_GENERATOR: return createLoadGenerator();
      case XCanopusPackage.MONITOR: return createMonitor();
      case XCanopusPackage.METRIC_MODEL: return createMetricModel();
      case XCanopusPackage.MEMORY: return createMemory();
      case XCanopusPackage.TRANSACTION: return createTransaction();
      case XCanopusPackage.DISK: return createDisk();
      case XCanopusPackage.CRITERIA: return createCriteria();
      case XCanopusPackage.THRESHOLD: return createThreshold();
      case XCanopusPackage.DISK_IO_COUNTER: return createDisk_IO_Counter();
      case XCanopusPackage.TRANSACTION_COUNTER: return createTransactionCounter();
      case XCanopusPackage.MEMORY_COUNTER: return createMemoryCounter();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XCanopusPackage.HARDWARE:
        return createHARDWAREFromString(eDataType, initialValue);
      case XCanopusPackage.SUT_TYPE:
        return createSUT_TYPEFromString(eDataType, initialValue);
      case XCanopusPackage.ASSOCIATION_CRITERIA:
        return createASSOCIATION_CRITERIAFromString(eDataType, initialValue);
      case XCanopusPackage.COUNTER_DISK:
        return createCOUNTER_DISKFromString(eDataType, initialValue);
      case XCanopusPackage.COUNTER_TRANSACTION:
        return createCOUNTER_TRANSACTIONFromString(eDataType, initialValue);
      case XCanopusPackage.COUNTER_MEMORY:
        return createCOUNTER_MEMORYFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XCanopusPackage.HARDWARE:
        return convertHARDWAREToString(eDataType, instanceValue);
      case XCanopusPackage.SUT_TYPE:
        return convertSUT_TYPEToString(eDataType, instanceValue);
      case XCanopusPackage.ASSOCIATION_CRITERIA:
        return convertASSOCIATION_CRITERIAToString(eDataType, instanceValue);
      case XCanopusPackage.COUNTER_DISK:
        return convertCOUNTER_DISKToString(eDataType, instanceValue);
      case XCanopusPackage.COUNTER_TRANSACTION:
        return convertCOUNTER_TRANSACTIONToString(eDataType, instanceValue);
      case XCanopusPackage.COUNTER_MEMORY:
        return convertCOUNTER_MEMORYToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Monitoring createMonitoring()
  {
    MonitoringImpl monitoring = new MonitoringImpl();
    return monitoring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CONDITION createCONDITION()
  {
    CONDITIONImpl condition = new CONDITIONImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AND createAND()
  {
    ANDImpl and = new ANDImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WHEN createWHEN()
  {
    WHENImpl when = new WHENImpl();
    return when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public THEN createTHEN()
  {
    THENImpl then = new THENImpl();
    return then;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public POSTCONDITION createPOSTCONDITION()
  {
    POSTCONDITIONImpl postcondition = new POSTCONDITIONImpl();
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Metric createMetric()
  {
    MetricImpl metric = new MetricImpl();
    return metric;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Counter createCounter()
  {
    CounterImpl counter = new CounterImpl();
    return counter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SUT createSUT()
  {
    SUTImpl sut = new SUTImpl();
    return sut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoadGenerator createLoadGenerator()
  {
    LoadGeneratorImpl loadGenerator = new LoadGeneratorImpl();
    return loadGenerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Monitor createMonitor()
  {
    MonitorImpl monitor = new MonitorImpl();
    return monitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetricModel createMetricModel()
  {
    MetricModelImpl metricModel = new MetricModelImpl();
    return metricModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Memory createMemory()
  {
    MemoryImpl memory = new MemoryImpl();
    return memory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transaction createTransaction()
  {
    TransactionImpl transaction = new TransactionImpl();
    return transaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Disk createDisk()
  {
    DiskImpl disk = new DiskImpl();
    return disk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Criteria createCriteria()
  {
    CriteriaImpl criteria = new CriteriaImpl();
    return criteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Threshold createThreshold()
  {
    ThresholdImpl threshold = new ThresholdImpl();
    return threshold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Disk_IO_Counter createDisk_IO_Counter()
  {
    Disk_IO_CounterImpl disk_IO_Counter = new Disk_IO_CounterImpl();
    return disk_IO_Counter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransactionCounter createTransactionCounter()
  {
    TransactionCounterImpl transactionCounter = new TransactionCounterImpl();
    return transactionCounter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MemoryCounter createMemoryCounter()
  {
    MemoryCounterImpl memoryCounter = new MemoryCounterImpl();
    return memoryCounter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HARDWARE createHARDWAREFromString(EDataType eDataType, String initialValue)
  {
    HARDWARE result = HARDWARE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertHARDWAREToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SUT_TYPE createSUT_TYPEFromString(EDataType eDataType, String initialValue)
  {
    SUT_TYPE result = SUT_TYPE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSUT_TYPEToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ASSOCIATION_CRITERIA createASSOCIATION_CRITERIAFromString(EDataType eDataType, String initialValue)
  {
    ASSOCIATION_CRITERIA result = ASSOCIATION_CRITERIA.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertASSOCIATION_CRITERIAToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COUNTER_DISK createCOUNTER_DISKFromString(EDataType eDataType, String initialValue)
  {
    COUNTER_DISK result = COUNTER_DISK.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCOUNTER_DISKToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COUNTER_TRANSACTION createCOUNTER_TRANSACTIONFromString(EDataType eDataType, String initialValue)
  {
    COUNTER_TRANSACTION result = COUNTER_TRANSACTION.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCOUNTER_TRANSACTIONToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COUNTER_MEMORY createCOUNTER_MEMORYFromString(EDataType eDataType, String initialValue)
  {
    COUNTER_MEMORY result = COUNTER_MEMORY.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCOUNTER_MEMORYToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XCanopusPackage getXCanopusPackage()
  {
    return (XCanopusPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static XCanopusPackage getPackage()
  {
    return XCanopusPackage.eINSTANCE;
  }

} //XCanopusFactoryImpl
