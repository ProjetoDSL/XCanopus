/**
 * generated by Xtext 2.16.0
 */
package org.unipampa.lesse.xCanopus.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.unipampa.lesse.xCanopus.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XCanopusFactoryImpl extends EFactoryImpl implements XCanopusFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static XCanopusFactory init()
  {
    try
    {
      XCanopusFactory theXCanopusFactory = (XCanopusFactory)EPackage.Registry.INSTANCE.getEFactory(XCanopusPackage.eNS_URI);
      if (theXCanopusFactory != null)
      {
        return theXCanopusFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new XCanopusFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XCanopusFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case XCanopusPackage.MODEL: return createModel();
      case XCanopusPackage.METRIC_MODEL: return createMetricModel();
      case XCanopusPackage.MAIN: return createMain();
      case XCanopusPackage.STEPS: return createSTEPS();
      case XCanopusPackage.AND_WORKLOAD: return createand_workload();
      case XCanopusPackage.AND_THE_SCENARIO: return createand_the_scenario();
      case XCanopusPackage.AND_ATLEAST: return createand_atleast();
      case XCanopusPackage.AND_THE_METRIC: return createand_the_metric();
      case XCanopusPackage.WHEN: return createwhen();
      case XCanopusPackage.THEN: return createthen();
      case XCanopusPackage.GIVEN: return creategiven();
      case XCanopusPackage.SCENARIO: return createSCENARIO();
      case XCanopusPackage.SUT: return createSUT();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XCanopusPackage.METRICTYPEMONITORED:
        return createMETRICTYPEMONITOREDFromString(eDataType, initialValue);
      case XCanopusPackage.METRICTYPE:
        return createMETRICTYPEFromString(eDataType, initialValue);
      case XCanopusPackage.HARDWARE:
        return createHARDWAREFromString(eDataType, initialValue);
      case XCanopusPackage.SUT_TYPE:
        return createSUT_TYPEFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XCanopusPackage.METRICTYPEMONITORED:
        return convertMETRICTYPEMONITOREDToString(eDataType, instanceValue);
      case XCanopusPackage.METRICTYPE:
        return convertMETRICTYPEToString(eDataType, instanceValue);
      case XCanopusPackage.HARDWARE:
        return convertHARDWAREToString(eDataType, instanceValue);
      case XCanopusPackage.SUT_TYPE:
        return convertSUT_TYPEToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetricModel createMetricModel()
  {
    MetricModelImpl metricModel = new MetricModelImpl();
    return metricModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Main createMain()
  {
    MainImpl main = new MainImpl();
    return main;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STEPS createSTEPS()
  {
    STEPSImpl steps = new STEPSImpl();
    return steps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public and_workload createand_workload()
  {
    and_workloadImpl and_workload = new and_workloadImpl();
    return and_workload;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public and_the_scenario createand_the_scenario()
  {
    and_the_scenarioImpl and_the_scenario = new and_the_scenarioImpl();
    return and_the_scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public and_atleast createand_atleast()
  {
    and_atleastImpl and_atleast = new and_atleastImpl();
    return and_atleast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public and_the_metric createand_the_metric()
  {
    and_the_metricImpl and_the_metric = new and_the_metricImpl();
    return and_the_metric;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public when createwhen()
  {
    whenImpl when = new whenImpl();
    return when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public then createthen()
  {
    thenImpl then = new thenImpl();
    return then;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public given creategiven()
  {
    givenImpl given = new givenImpl();
    return given;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SCENARIO createSCENARIO()
  {
    SCENARIOImpl scenario = new SCENARIOImpl();
    return scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SUT createSUT()
  {
    SUTImpl sut = new SUTImpl();
    return sut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public METRICTYPEMONITORED createMETRICTYPEMONITOREDFromString(EDataType eDataType, String initialValue)
  {
    METRICTYPEMONITORED result = METRICTYPEMONITORED.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMETRICTYPEMONITOREDToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public METRICTYPE createMETRICTYPEFromString(EDataType eDataType, String initialValue)
  {
    METRICTYPE result = METRICTYPE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMETRICTYPEToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HARDWARE createHARDWAREFromString(EDataType eDataType, String initialValue)
  {
    HARDWARE result = HARDWARE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertHARDWAREToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SUT_TYPE createSUT_TYPEFromString(EDataType eDataType, String initialValue)
  {
    SUT_TYPE result = SUT_TYPE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSUT_TYPEToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XCanopusPackage getXCanopusPackage()
  {
    return (XCanopusPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static XCanopusPackage getPackage()
  {
    return XCanopusPackage.eINSTANCE;
  }

} //XCanopusFactoryImpl
