/**
 * generated by Xtext 2.16.0
 */
package org.unipampa.lesse.xCanopus.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.unipampa.lesse.xCanopus.HARDWARE;
import org.unipampa.lesse.xCanopus.LoadGenerator;
import org.unipampa.lesse.xCanopus.MetricModel;
import org.unipampa.lesse.xCanopus.Monitor;
import org.unipampa.lesse.xCanopus.SUT;
import org.unipampa.lesse.xCanopus.XCanopusPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Load Generator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.unipampa.lesse.xCanopus.impl.LoadGeneratorImpl#isIsMonitor <em>Is Monitor</em>}</li>
 *   <li>{@link org.unipampa.lesse.xCanopus.impl.LoadGeneratorImpl#getHostname <em>Hostname</em>}</li>
 *   <li>{@link org.unipampa.lesse.xCanopus.impl.LoadGeneratorImpl#getIp <em>Ip</em>}</li>
 *   <li>{@link org.unipampa.lesse.xCanopus.impl.LoadGeneratorImpl#getHardware <em>Hardware</em>}</li>
 *   <li>{@link org.unipampa.lesse.xCanopus.impl.LoadGeneratorImpl#getSut <em>Sut</em>}</li>
 *   <li>{@link org.unipampa.lesse.xCanopus.impl.LoadGeneratorImpl#getMetricmodel <em>Metricmodel</em>}</li>
 *   <li>{@link org.unipampa.lesse.xCanopus.impl.LoadGeneratorImpl#getMonitor <em>Monitor</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LoadGeneratorImpl extends MinimalEObjectImpl.Container implements LoadGenerator
{
  /**
   * The default value of the '{@link #isIsMonitor() <em>Is Monitor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsMonitor()
   * @generated
   * @ordered
   */
  protected static final boolean IS_MONITOR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsMonitor() <em>Is Monitor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsMonitor()
   * @generated
   * @ordered
   */
  protected boolean isMonitor = IS_MONITOR_EDEFAULT;

  /**
   * The default value of the '{@link #getHostname() <em>Hostname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHostname()
   * @generated
   * @ordered
   */
  protected static final String HOSTNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHostname() <em>Hostname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHostname()
   * @generated
   * @ordered
   */
  protected String hostname = HOSTNAME_EDEFAULT;

  /**
   * The default value of the '{@link #getIp() <em>Ip</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIp()
   * @generated
   * @ordered
   */
  protected static final String IP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIp() <em>Ip</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIp()
   * @generated
   * @ordered
   */
  protected String ip = IP_EDEFAULT;

  /**
   * The default value of the '{@link #getHardware() <em>Hardware</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHardware()
   * @generated
   * @ordered
   */
  protected static final HARDWARE HARDWARE_EDEFAULT = HARDWARE.PHYSICAL_MACHINE;

  /**
   * The cached value of the '{@link #getHardware() <em>Hardware</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHardware()
   * @generated
   * @ordered
   */
  protected HARDWARE hardware = HARDWARE_EDEFAULT;

  /**
   * The cached value of the '{@link #getSut() <em>Sut</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSut()
   * @generated
   * @ordered
   */
  protected EList<SUT> sut;

  /**
   * The cached value of the '{@link #getMetricmodel() <em>Metricmodel</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetricmodel()
   * @generated
   * @ordered
   */
  protected MetricModel metricmodel;

  /**
   * The cached value of the '{@link #getMonitor() <em>Monitor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMonitor()
   * @generated
   * @ordered
   */
  protected Monitor monitor;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LoadGeneratorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XCanopusPackage.Literals.LOAD_GENERATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsMonitor()
  {
    return isMonitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsMonitor(boolean newIsMonitor)
  {
    boolean oldIsMonitor = isMonitor;
    isMonitor = newIsMonitor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XCanopusPackage.LOAD_GENERATOR__IS_MONITOR, oldIsMonitor, isMonitor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHostname()
  {
    return hostname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHostname(String newHostname)
  {
    String oldHostname = hostname;
    hostname = newHostname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XCanopusPackage.LOAD_GENERATOR__HOSTNAME, oldHostname, hostname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIp()
  {
    return ip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIp(String newIp)
  {
    String oldIp = ip;
    ip = newIp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XCanopusPackage.LOAD_GENERATOR__IP, oldIp, ip));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HARDWARE getHardware()
  {
    return hardware;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHardware(HARDWARE newHardware)
  {
    HARDWARE oldHardware = hardware;
    hardware = newHardware == null ? HARDWARE_EDEFAULT : newHardware;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XCanopusPackage.LOAD_GENERATOR__HARDWARE, oldHardware, hardware));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SUT> getSut()
  {
    if (sut == null)
    {
      sut = new EObjectResolvingEList<SUT>(SUT.class, this, XCanopusPackage.LOAD_GENERATOR__SUT);
    }
    return sut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetricModel getMetricmodel()
  {
    if (metricmodel != null && metricmodel.eIsProxy())
    {
      InternalEObject oldMetricmodel = (InternalEObject)metricmodel;
      metricmodel = (MetricModel)eResolveProxy(oldMetricmodel);
      if (metricmodel != oldMetricmodel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XCanopusPackage.LOAD_GENERATOR__METRICMODEL, oldMetricmodel, metricmodel));
      }
    }
    return metricmodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetricModel basicGetMetricmodel()
  {
    return metricmodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMetricmodel(MetricModel newMetricmodel)
  {
    MetricModel oldMetricmodel = metricmodel;
    metricmodel = newMetricmodel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XCanopusPackage.LOAD_GENERATOR__METRICMODEL, oldMetricmodel, metricmodel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Monitor getMonitor()
  {
    if (monitor != null && monitor.eIsProxy())
    {
      InternalEObject oldMonitor = (InternalEObject)monitor;
      monitor = (Monitor)eResolveProxy(oldMonitor);
      if (monitor != oldMonitor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XCanopusPackage.LOAD_GENERATOR__MONITOR, oldMonitor, monitor));
      }
    }
    return monitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Monitor basicGetMonitor()
  {
    return monitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMonitor(Monitor newMonitor)
  {
    Monitor oldMonitor = monitor;
    monitor = newMonitor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XCanopusPackage.LOAD_GENERATOR__MONITOR, oldMonitor, monitor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XCanopusPackage.LOAD_GENERATOR__IS_MONITOR:
        return isIsMonitor();
      case XCanopusPackage.LOAD_GENERATOR__HOSTNAME:
        return getHostname();
      case XCanopusPackage.LOAD_GENERATOR__IP:
        return getIp();
      case XCanopusPackage.LOAD_GENERATOR__HARDWARE:
        return getHardware();
      case XCanopusPackage.LOAD_GENERATOR__SUT:
        return getSut();
      case XCanopusPackage.LOAD_GENERATOR__METRICMODEL:
        if (resolve) return getMetricmodel();
        return basicGetMetricmodel();
      case XCanopusPackage.LOAD_GENERATOR__MONITOR:
        if (resolve) return getMonitor();
        return basicGetMonitor();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XCanopusPackage.LOAD_GENERATOR__IS_MONITOR:
        setIsMonitor((Boolean)newValue);
        return;
      case XCanopusPackage.LOAD_GENERATOR__HOSTNAME:
        setHostname((String)newValue);
        return;
      case XCanopusPackage.LOAD_GENERATOR__IP:
        setIp((String)newValue);
        return;
      case XCanopusPackage.LOAD_GENERATOR__HARDWARE:
        setHardware((HARDWARE)newValue);
        return;
      case XCanopusPackage.LOAD_GENERATOR__SUT:
        getSut().clear();
        getSut().addAll((Collection<? extends SUT>)newValue);
        return;
      case XCanopusPackage.LOAD_GENERATOR__METRICMODEL:
        setMetricmodel((MetricModel)newValue);
        return;
      case XCanopusPackage.LOAD_GENERATOR__MONITOR:
        setMonitor((Monitor)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XCanopusPackage.LOAD_GENERATOR__IS_MONITOR:
        setIsMonitor(IS_MONITOR_EDEFAULT);
        return;
      case XCanopusPackage.LOAD_GENERATOR__HOSTNAME:
        setHostname(HOSTNAME_EDEFAULT);
        return;
      case XCanopusPackage.LOAD_GENERATOR__IP:
        setIp(IP_EDEFAULT);
        return;
      case XCanopusPackage.LOAD_GENERATOR__HARDWARE:
        setHardware(HARDWARE_EDEFAULT);
        return;
      case XCanopusPackage.LOAD_GENERATOR__SUT:
        getSut().clear();
        return;
      case XCanopusPackage.LOAD_GENERATOR__METRICMODEL:
        setMetricmodel((MetricModel)null);
        return;
      case XCanopusPackage.LOAD_GENERATOR__MONITOR:
        setMonitor((Monitor)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XCanopusPackage.LOAD_GENERATOR__IS_MONITOR:
        return isMonitor != IS_MONITOR_EDEFAULT;
      case XCanopusPackage.LOAD_GENERATOR__HOSTNAME:
        return HOSTNAME_EDEFAULT == null ? hostname != null : !HOSTNAME_EDEFAULT.equals(hostname);
      case XCanopusPackage.LOAD_GENERATOR__IP:
        return IP_EDEFAULT == null ? ip != null : !IP_EDEFAULT.equals(ip);
      case XCanopusPackage.LOAD_GENERATOR__HARDWARE:
        return hardware != HARDWARE_EDEFAULT;
      case XCanopusPackage.LOAD_GENERATOR__SUT:
        return sut != null && !sut.isEmpty();
      case XCanopusPackage.LOAD_GENERATOR__METRICMODEL:
        return metricmodel != null;
      case XCanopusPackage.LOAD_GENERATOR__MONITOR:
        return monitor != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isMonitor: ");
    result.append(isMonitor);
    result.append(", hostname: ");
    result.append(hostname);
    result.append(", ip: ");
    result.append(ip);
    result.append(", hardware: ");
    result.append(hardware);
    result.append(')');
    return result.toString();
  }

} //LoadGeneratorImpl
