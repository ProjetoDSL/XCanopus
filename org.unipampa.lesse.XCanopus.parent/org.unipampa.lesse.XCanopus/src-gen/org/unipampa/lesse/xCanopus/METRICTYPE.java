/**
 * generated by Xtext 2.16.0
 */
package org.unipampa.lesse.xCanopus;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>METRICTYPE</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see org.unipampa.lesse.xCanopus.XCanopusPackage#getMETRICTYPE()
 * @model
 * @generated
 */
public enum METRICTYPE implements Enumerator
{
  /**
   * The '<em><b>Availablembytescounter</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #AVAILABLEMBYTESCOUNTER_VALUE
   * @generated
   * @ordered
   */
  AVAILABLEMBYTESCOUNTER(0, "availablembytescounter", "available mbytes counter"),

  /**
   * The '<em><b>Idletimecounter</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #IDLETIMECOUNTER_VALUE
   * @generated
   * @ordered
   */
  IDLETIMECOUNTER(1, "idletimecounter", "% idle time counter"),

  /**
   * The '<em><b>Throughputmbytes</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #THROUGHPUTMBYTES_VALUE
   * @generated
   * @ordered
   */
  THROUGHPUTMBYTES(2, "throughputmbytes", "throughput mbytes"),

  /**
   * The '<em><b>Transactionpersecond</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TRANSACTIONPERSECOND_VALUE
   * @generated
   * @ordered
   */
  TRANSACTIONPERSECOND(3, "transactionpersecond", "transactions per second"),

  /**
   * The '<em><b>TPS</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TPS_VALUE
   * @generated
   * @ordered
   */
  TPS(4, "TPS", "TPS"),

  /**
   * The '<em><b>Processortimecounter</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PROCESSORTIMECOUNTER_VALUE
   * @generated
   * @ordered
   */
  PROCESSORTIMECOUNTER(5, "processortimecounter", "% processor time count"),

  /**
   * The '<em><b>Transactionresponsetime</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TRANSACTIONRESPONSETIME_VALUE
   * @generated
   * @ordered
   */
  TRANSACTIONRESPONSETIME(6, "transactionresponsetime", "transactions response time");

  /**
   * The '<em><b>Availablembytescounter</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Availablembytescounter</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #AVAILABLEMBYTESCOUNTER
   * @model name="availablembytescounter" literal="available mbytes counter"
   * @generated
   * @ordered
   */
  public static final int AVAILABLEMBYTESCOUNTER_VALUE = 0;

  /**
   * The '<em><b>Idletimecounter</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Idletimecounter</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #IDLETIMECOUNTER
   * @model name="idletimecounter" literal="% idle time counter"
   * @generated
   * @ordered
   */
  public static final int IDLETIMECOUNTER_VALUE = 1;

  /**
   * The '<em><b>Throughputmbytes</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Throughputmbytes</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #THROUGHPUTMBYTES
   * @model name="throughputmbytes" literal="throughput mbytes"
   * @generated
   * @ordered
   */
  public static final int THROUGHPUTMBYTES_VALUE = 2;

  /**
   * The '<em><b>Transactionpersecond</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Transactionpersecond</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TRANSACTIONPERSECOND
   * @model name="transactionpersecond" literal="transactions per second"
   * @generated
   * @ordered
   */
  public static final int TRANSACTIONPERSECOND_VALUE = 3;

  /**
   * The '<em><b>TPS</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>TPS</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TPS
   * @model
   * @generated
   * @ordered
   */
  public static final int TPS_VALUE = 4;

  /**
   * The '<em><b>Processortimecounter</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Processortimecounter</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #PROCESSORTIMECOUNTER
   * @model name="processortimecounter" literal="% processor time count"
   * @generated
   * @ordered
   */
  public static final int PROCESSORTIMECOUNTER_VALUE = 5;

  /**
   * The '<em><b>Transactionresponsetime</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Transactionresponsetime</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TRANSACTIONRESPONSETIME
   * @model name="transactionresponsetime" literal="transactions response time"
   * @generated
   * @ordered
   */
  public static final int TRANSACTIONRESPONSETIME_VALUE = 6;

  /**
   * An array of all the '<em><b>METRICTYPE</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final METRICTYPE[] VALUES_ARRAY =
    new METRICTYPE[]
    {
      AVAILABLEMBYTESCOUNTER,
      IDLETIMECOUNTER,
      THROUGHPUTMBYTES,
      TRANSACTIONPERSECOND,
      TPS,
      PROCESSORTIMECOUNTER,
      TRANSACTIONRESPONSETIME,
    };

  /**
   * A public read-only list of all the '<em><b>METRICTYPE</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<METRICTYPE> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>METRICTYPE</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static METRICTYPE get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      METRICTYPE result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>METRICTYPE</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static METRICTYPE getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      METRICTYPE result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>METRICTYPE</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static METRICTYPE get(int value)
  {
    switch (value)
    {
      case AVAILABLEMBYTESCOUNTER_VALUE: return AVAILABLEMBYTESCOUNTER;
      case IDLETIMECOUNTER_VALUE: return IDLETIMECOUNTER;
      case THROUGHPUTMBYTES_VALUE: return THROUGHPUTMBYTES;
      case TRANSACTIONPERSECOND_VALUE: return TRANSACTIONPERSECOND;
      case TPS_VALUE: return TPS;
      case PROCESSORTIMECOUNTER_VALUE: return PROCESSORTIMECOUNTER;
      case TRANSACTIONRESPONSETIME_VALUE: return TRANSACTIONRESPONSETIME;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private METRICTYPE(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //METRICTYPE
