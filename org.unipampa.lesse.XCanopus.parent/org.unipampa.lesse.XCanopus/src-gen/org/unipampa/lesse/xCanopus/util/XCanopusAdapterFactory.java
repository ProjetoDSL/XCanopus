/**
 * generated by Xtext 2.16.0
 */
package org.unipampa.lesse.xCanopus.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.unipampa.lesse.xCanopus.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.unipampa.lesse.xCanopus.XCanopusPackage
 * @generated
 */
public class XCanopusAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XCanopusPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XCanopusAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = XCanopusPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XCanopusSwitch<Adapter> modelSwitch =
    new XCanopusSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseMetricModel(MetricModel object)
      {
        return createMetricModelAdapter();
      }
      @Override
      public Adapter caseMain(Main object)
      {
        return createMainAdapter();
      }
      @Override
      public Adapter caseSTEPS(STEPS object)
      {
        return createSTEPSAdapter();
      }
      @Override
      public Adapter caseand_workload(and_workload object)
      {
        return createand_workloadAdapter();
      }
      @Override
      public Adapter caseand_the_scenario(and_the_scenario object)
      {
        return createand_the_scenarioAdapter();
      }
      @Override
      public Adapter caseand_atleast(and_atleast object)
      {
        return createand_atleastAdapter();
      }
      @Override
      public Adapter caseand_the_metric(and_the_metric object)
      {
        return createand_the_metricAdapter();
      }
      @Override
      public Adapter casewhen(when object)
      {
        return createwhenAdapter();
      }
      @Override
      public Adapter casethen(then object)
      {
        return createthenAdapter();
      }
      @Override
      public Adapter casegiven(given object)
      {
        return creategivenAdapter();
      }
      @Override
      public Adapter caseSCENARIO(SCENARIO object)
      {
        return createSCENARIOAdapter();
      }
      @Override
      public Adapter caseSUT(SUT object)
      {
        return createSUTAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.MetricModel <em>Metric Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.MetricModel
   * @generated
   */
  public Adapter createMetricModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.Main <em>Main</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.Main
   * @generated
   */
  public Adapter createMainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.STEPS <em>STEPS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.STEPS
   * @generated
   */
  public Adapter createSTEPSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.and_workload <em>and workload</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.and_workload
   * @generated
   */
  public Adapter createand_workloadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.and_the_scenario <em>and the scenario</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.and_the_scenario
   * @generated
   */
  public Adapter createand_the_scenarioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.and_atleast <em>and atleast</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.and_atleast
   * @generated
   */
  public Adapter createand_atleastAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.and_the_metric <em>and the metric</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.and_the_metric
   * @generated
   */
  public Adapter createand_the_metricAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.when <em>when</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.when
   * @generated
   */
  public Adapter createwhenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.then <em>then</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.then
   * @generated
   */
  public Adapter createthenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.given <em>given</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.given
   * @generated
   */
  public Adapter creategivenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.SCENARIO <em>SCENARIO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.SCENARIO
   * @generated
   */
  public Adapter createSCENARIOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unipampa.lesse.xCanopus.SUT <em>SUT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unipampa.lesse.xCanopus.SUT
   * @generated
   */
  public Adapter createSUTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //XCanopusAdapterFactory
