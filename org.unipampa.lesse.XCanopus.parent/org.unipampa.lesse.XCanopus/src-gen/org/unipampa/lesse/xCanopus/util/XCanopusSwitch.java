/**
 * generated by Xtext 2.16.0
 */
package org.unipampa.lesse.xCanopus.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.unipampa.lesse.xCanopus.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.unipampa.lesse.xCanopus.XCanopusPackage
 * @generated
 */
public class XCanopusSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XCanopusPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XCanopusSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = XCanopusPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case XCanopusPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.INCLUDE:
      {
        Include include = (Include)theEObject;
        T result = caseInclude(include);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.MONITORING:
      {
        Monitoring monitoring = (Monitoring)theEObject;
        T result = caseMonitoring(monitoring);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.CONDITION:
      {
        CONDITION condition = (CONDITION)theEObject;
        T result = caseCONDITION(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.AND:
      {
        AND and = (AND)theEObject;
        T result = caseAND(and);
        if (result == null) result = caseCONDITION(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.WHEN:
      {
        WHEN when = (WHEN)theEObject;
        T result = caseWHEN(when);
        if (result == null) result = caseCONDITION(when);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.THEN:
      {
        THEN then = (THEN)theEObject;
        T result = caseTHEN(then);
        if (result == null) result = caseCONDITION(then);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.POSTCONDITION:
      {
        POSTCONDITION postcondition = (POSTCONDITION)theEObject;
        T result = casePOSTCONDITION(postcondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.METRIC:
      {
        Metric metric = (Metric)theEObject;
        T result = caseMetric(metric);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.COUNTER:
      {
        Counter counter = (Counter)theEObject;
        T result = caseCounter(counter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.SUT:
      {
        SUT sut = (SUT)theEObject;
        T result = caseSUT(sut);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.LOAD_GENERATOR:
      {
        LoadGenerator loadGenerator = (LoadGenerator)theEObject;
        T result = caseLoadGenerator(loadGenerator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.MONITOR:
      {
        Monitor monitor = (Monitor)theEObject;
        T result = caseMonitor(monitor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.METRIC_MODEL:
      {
        MetricModel metricModel = (MetricModel)theEObject;
        T result = caseMetricModel(metricModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.MEMORY:
      {
        Memory memory = (Memory)theEObject;
        T result = caseMemory(memory);
        if (result == null) result = caseMetric(memory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.TRANSACTION:
      {
        Transaction transaction = (Transaction)theEObject;
        T result = caseTransaction(transaction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.DISK:
      {
        Disk disk = (Disk)theEObject;
        T result = caseDisk(disk);
        if (result == null) result = caseMetric(disk);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.CRITERIA:
      {
        Criteria criteria = (Criteria)theEObject;
        T result = caseCriteria(criteria);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.THRESHOLD:
      {
        Threshold threshold = (Threshold)theEObject;
        T result = caseThreshold(threshold);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.DISK_IO_COUNTER:
      {
        Disk_IO_Counter disk_IO_Counter = (Disk_IO_Counter)theEObject;
        T result = caseDisk_IO_Counter(disk_IO_Counter);
        if (result == null) result = caseCounter(disk_IO_Counter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.TRANSACTION_COUNTER:
      {
        TransactionCounter transactionCounter = (TransactionCounter)theEObject;
        T result = caseTransactionCounter(transactionCounter);
        if (result == null) result = caseCounter(transactionCounter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.MEMORY_COUNTER:
      {
        MemoryCounter memoryCounter = (MemoryCounter)theEObject;
        T result = caseMemoryCounter(memoryCounter);
        if (result == null) result = caseCounter(memoryCounter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInclude(Include object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Monitoring</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Monitoring</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMonitoring(Monitoring object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CONDITION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CONDITION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCONDITION(CONDITION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AND</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AND</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAND(AND object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>WHEN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>WHEN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWHEN(WHEN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>THEN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>THEN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTHEN(THEN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>POSTCONDITION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>POSTCONDITION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePOSTCONDITION(POSTCONDITION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Metric</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Metric</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMetric(Metric object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Counter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Counter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCounter(Counter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SUT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SUT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSUT(SUT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Load Generator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Load Generator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoadGenerator(LoadGenerator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Monitor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Monitor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMonitor(Monitor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Metric Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Metric Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMetricModel(MetricModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemory(Memory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transaction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transaction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransaction(Transaction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Disk</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Disk</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDisk(Disk object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Criteria</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Criteria</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCriteria(Criteria object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Threshold</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Threshold</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThreshold(Threshold object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Disk IO Counter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Disk IO Counter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDisk_IO_Counter(Disk_IO_Counter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transaction Counter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transaction Counter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransactionCounter(TransactionCounter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memory Counter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memory Counter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemoryCounter(MemoryCounter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //XCanopusSwitch
