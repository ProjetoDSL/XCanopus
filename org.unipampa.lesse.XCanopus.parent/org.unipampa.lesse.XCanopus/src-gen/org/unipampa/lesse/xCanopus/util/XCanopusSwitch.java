/**
 * generated by Xtext 2.16.0
 */
package org.unipampa.lesse.xCanopus.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.unipampa.lesse.xCanopus.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.unipampa.lesse.xCanopus.XCanopusPackage
 * @generated
 */
public class XCanopusSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XCanopusPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XCanopusSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = XCanopusPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case XCanopusPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.METRIC_MODEL:
      {
        MetricModel metricModel = (MetricModel)theEObject;
        T result = caseMetricModel(metricModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.MAIN:
      {
        Main main = (Main)theEObject;
        T result = caseMain(main);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.STEPS:
      {
        STEPS steps = (STEPS)theEObject;
        T result = caseSTEPS(steps);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.AND_WORKLOAD:
      {
        and_workload and_workload = (and_workload)theEObject;
        T result = caseand_workload(and_workload);
        if (result == null) result = caseSTEPS(and_workload);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.AND_THE_SCENARIO:
      {
        and_the_scenario and_the_scenario = (and_the_scenario)theEObject;
        T result = caseand_the_scenario(and_the_scenario);
        if (result == null) result = caseSTEPS(and_the_scenario);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.AND_ATLEAST:
      {
        and_atleast and_atleast = (and_atleast)theEObject;
        T result = caseand_atleast(and_atleast);
        if (result == null) result = caseSTEPS(and_atleast);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.AND_THE_METRIC:
      {
        and_the_metric and_the_metric = (and_the_metric)theEObject;
        T result = caseand_the_metric(and_the_metric);
        if (result == null) result = caseSTEPS(and_the_metric);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.WHEN:
      {
        when when = (when)theEObject;
        T result = casewhen(when);
        if (result == null) result = caseSTEPS(when);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.THEN:
      {
        then then = (then)theEObject;
        T result = casethen(then);
        if (result == null) result = caseSTEPS(then);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.GIVEN:
      {
        given given = (given)theEObject;
        T result = casegiven(given);
        if (result == null) result = caseSTEPS(given);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.SCENARIO:
      {
        SCENARIO scenario = (SCENARIO)theEObject;
        T result = caseSCENARIO(scenario);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XCanopusPackage.SUT:
      {
        SUT sut = (SUT)theEObject;
        T result = caseSUT(sut);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Metric Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Metric Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMetricModel(MetricModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Main</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Main</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMain(Main object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>STEPS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>STEPS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTEPS(STEPS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>and workload</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>and workload</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseand_workload(and_workload object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>and the scenario</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>and the scenario</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseand_the_scenario(and_the_scenario object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>and atleast</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>and atleast</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseand_atleast(and_atleast object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>and the metric</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>and the metric</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseand_the_metric(and_the_metric object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>when</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>when</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casewhen(when object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>then</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>then</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethen(then object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>given</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>given</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casegiven(given object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SCENARIO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SCENARIO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSCENARIO(SCENARIO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SUT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SUT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSUT(SUT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //XCanopusSwitch
