grammar org.unipampa.lesse.XCanopus with org.eclipse.xtext.common.Terminals hidden (WS, ML_COMMENT, SL_COMMENT) 


generate xCanopus "http://www.unipampa.org/lesse/XCanopus"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model: 
//	   includes += Include*
	   (monitorings+=Monitoring)*
	   (suts+=SUT)*
	  // loadGenerators+=LoadGenerator*
	   (scenario+=SCENARIO)*	   
; 

//Include:
//	'include' importURI=STRING 'as' name=ID
//;


Monitoring:
	'Feature:' Freetext '.' 
	'Monitoring:' name=ID 'description' Freetext '.' '{'
	(steps+=STEPS)* '}'
;



// '|' choice
// '?' optional+
// '+' 1 or more
// '*' 0 or more
// '+=' list of elements

// 0 or more strings
Freetext:
	EString*
;
 
  
STEPS: given | when | then | and_workload | and_atleast | and_the_scenario | and_the_metric;

and_workload:
	'And' WORKLOADGENERATED sut1=[SUT|ID] LOADGENERATORFORTHE suttype=SUT_TYPE ON sut2=[SUT|ID]
;
and_the_scenario:
	'And' THE scenario=[SCENARIO|ID] ISTESTSCENARIO 
;
and_atleast:
	'And' ATL integer1=INT (MBWHEN_GREATEROREQUAL_TEXT | MBWHEN_LESSTHAN_TEXT | MBWHEN_MORETHAN_TEXT | MBWHEN_MINOROREQUAL_TEXT) integer2=INT
;
and_the_metric:
	'And' THE metric=METRICTYPE (SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN) integer1=INT (WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT | WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT) integer2=INT ('and' integer3=INT)?
;
when:
	'When' THE metrictype=METRICTYPEMONITORED ISMONITORED
	; 
then:
	'Then' THE metric=METRICTYPE (SHOULDBELESSTHAN_TEXT | SHOULDBEATLEAST_TEXT | SHOULDBEGREATERTHAN) integer1=INT (WHENTHENUMBERISLESSTHAN_TEXT | WHENTHENUMBERISGREATERTHAN_TEXT | WHENTHENUMBERISGREATEROREQUAL_TEXT | WHENTHENUMBERIRLESSEROREQUAL_TEXT | WHENTHENUMBERAREBETWEEN_TEXT) integer2=INT ('and' integer3=INT)?
;
given:
	'Given' THAT sut1=[SUT|ID] suttype=SUT_TYPE MONITOREDBY sut2=[SUT|ID] 'monitor'
;

enum METRICTYPEMONITORED: MEMORY = 'memory' | DISK = 'disk' | WEBRESOURCES = 'web resources' | TRANSACTION = 'transaction' | PROCESSOR = 'processor' ;

enum METRICTYPE: availablembytescounter = 'available mbytes counter' | idletimecounter = '% idle time counter' | throughputmbytes = 'throughput mbytes' | transactionpersecond = 'transactions per second' | TPS = 'TPS' | processortimecounter = '% processor time count' | transactionresponsetime = 'transactions response time';

//availablembytescounter:
//	AVAILABLEMBYTESCOUNTER_TEXT 
//;
//idletimecounter:
//	IDLETIMECOUNTER_TEXT 
//;
//throughputmbytes:
//	THROUGHPUTMBYTES_TEXT 
//;
//transactionpersecond:
	 
//;
//processortimecounter:
//	PROCESSORTIMECOUNTER_TEXT
//;



SCENARIO:
	'Scenario' '{'
	name=ID
	'}'
;
	
SUT:
	{SUT}
	'SUT'
	'{'
		name=ID
	//	('hostname' hostname=EString)?
	//	('ip' ip=EString)?
	//	('hardware' hardware=HARDWARE)?
	//	('type' type=SUT_TYPE)?
	//	('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
	//	('metricmodel' metricmodel=[MetricModel|EString])?
	'}';

//LoadGenerator:
//	{LoadGenerator}
//	(isMonitor?='isMonitor')?
//	'LoadGenerator'
//	'{'
//		('hostname' hostname=EString)?
//		('ip' ip=EString)?
//		('hardware' hardware=HARDWARE)?
//		('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
//		('metricmodel' metricmodel=[MetricModel|EString])?
//		('monitorr' monitor=[Monitor|EString])?
//	'}';

//Monitor:
//	{Monitor}
//	'Monitor'
//	'{'
//		('hostname' hostname=EString)?
//		('ip' ip=EString)?
//		('hardware' hardware=HARDWARE)?
//		('sut' '(' sut+=[SUT|EString] ( "," sut+=[SUT|EString])* ')' )?
//	'}';



EInt returns ecore::EInt:
	'-'? INT;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
EString returns ecore::EString:
	STRING | ID;
	
enum HARDWARE:
				PHYSICAL_MACHINE = 'PHYSICAL_MACHINE' | VIRTUAL_MACHINE = 'VIRTUAL_MACHINE' | CLOUD_SERVICE = 'CLOUD_SERVICE';

enum SUT_TYPE:
				DESKTOPAPP = 'DESKTOPAPP' | DATABASE = 'DATABASE' | WEBAPP = 'WEBAPP' | WEBSERVICE = 'WEBSERVICE';	

//enum COUNTER_DISK:
//				AVG_DISK_SECS_TRANSFER_COUNTER = 'AVG_DISK_SECS_TRANSFER_COUNTER' | PERCENTAGE_IDLE_TIME_COUNTER = 'PERCENTAGE_IDLE_TIME_COUNTER' | DISK_TRANSFERS_SEC_COUNTER = 'DISK_TRANSFERS_SEC_COUNTER' | AVG_DISK_QUEUE_LENGTH_COUNTER = 'AVG_DISK_QUEUE_LENGTH_COUNTER' | SPLIT_IO_SEC_COUNTER = 'SPLIT_IO_SEC_COUNTER' | FREE_MEGABYTES_COUNTER = 'FREE_MEGABYTES_COUNTER';

//enum COUNTER_TRANSACTION:
//				TRANSACTION_RESPONSE_TIME = 'TRANSACTION_RESPONSE_TIME' | TRANSACTION_PER_SECOND_TPS = 'TRANSACTION_PER_SECOND_TPS' | TRANSACTION_SUCCESS_RATE = 'TRANSACTION_SUCCESS_RATE';

//enum COUNTER_MEMORY:
//				AVALIABLE_MBYTES_COUNTER = 'AVALIABLE_MBYTES_COUNTER' | PAGES_SEC_COUNTER = 'PAGES_SEC_COUNTER' | PAGE_READS_SEC_COUNTER = 'PAGE_READS_SEC_COUNTER' | WORKING_SET_COUNTER = 'WORKING_SET_COUNTER' | POOL_NONPAGE_BYTES_COUNTER = 'POOL_NONPAGE_BYTES_COUNTER' | PAGED_POOL_BYTES_COUNTER = 'PAGED_POOL_BYTES_COUNTER' | PAGED_POOL_FAILURES_COUNTER = 'PAGED_POOL_FAILURES_COUNTER' | CACHE_BYTES_COUNTER = 'CACHE_BYTES_COUNTER';
	
	
	
terminal SHOULDBELESSTHAN_TEXT:'should be less than';
terminal SHOULDBEATLEAST_TEXT:'should be at least';
terminal SHOULDBEGREATERTHAN:'should be more than';

terminal WHENTHENUMBERISLESSTHAN_TEXT:'when the number of virtual users is less than';
terminal WHENTHENUMBERISGREATERTHAN_TEXT:'when the number of virtual users is greater than';
terminal WHENTHENUMBERISGREATEROREQUAL_TEXT:'when the number of virtual users is greater or equal to';
terminal WHENTHENUMBERIRLESSEROREQUAL_TEXT:'when the number of virtual users is lesser or equal to';
terminal WHENTHENUMBERAREBETWEEN_TEXT:'when the number of virtual users are between';	

//terminal AVAILABLEMBYTESCOUNTER_TEXT:'available mbytes counter';
//terminal IDLETIMECOUNTER_TEXT:'% idle time counter' ;
//terminal THROUGHPUTMBYTES_TEXT:'throughput mbytes' ;
//terminal TRANSACTIONPERSECOND_TEXT:'transaction per second (TPS)' ;
//terminal PROCESSORTIMECOUNTER_TEXT:'% processor time count' ;

terminal MBWHEN_GREATEROREQUAL_TEXT:'MB when the number of virtual users is greater than or equal to';
terminal MBWHEN_LESSTHAN_TEXT:'MB when the number of virtual users is less than';
terminal MBWHEN_MORETHAN_TEXT:'MB when the number of virtual users is more than';
terminal MBWHEN_MINOROREQUAL_TEXT:'MB when the number of virtual users is lesser than or equal to';


terminal THE:'the';
terminal THAT:'that';	
terminal MONITOREDBY:'monitored by ';
terminal WORKLOADGENERATED:'workload generated through';
terminal LOADGENERATORFORTHE:'Load Generator for the';
terminal ISTESTSCENARIO:'test scenario';
terminal ON:'on';
terminal ISMONITORED:'is monitored';
terminal ATL:'at least';

terminal fragment NNL: !('\r' | '\n');
terminal fragment NL: '\r'? '\n'?;

@Override 
terminal ID: 
    '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
 
@Override 
terminal INT returns ecore::EInt: 
    ('0'..'9')+;
 
@Override 
terminal STRING: 
    '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
 
@Override 
terminal ML_COMMENT: 
    '/*' -> '*/';
 
@Override 
terminal SL_COMMENT: 
    '//' !('\n'|'\r')* ('\r'? '\n')?;
 
@Override 
terminal WS: 
    (' '|'\t'|'\r'|'\n')+;
 
@Override 
terminal ANY_OTHER: 
.;
